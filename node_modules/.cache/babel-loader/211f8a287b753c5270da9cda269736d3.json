{"ast":null,"code":"import { mapState } from 'vuex';\nimport BaseInput from \"@/components/BaseInput.vue\";\nexport default {\n  name: 'InsuranceEffectiveDate',\n  components: {\n    BaseInput\n  },\n  computed: { ...mapState({\n      insurance_effective_date: state => state.insurance_effective_date\n    }),\n    insurance_effective_date: {\n      get() {\n        return this.$store.state.insurance_effective_date;\n      },\n\n      set(value) {\n        this.$store.commit('updateInsuranceEffectiveDate', value);\n      }\n\n    },\n    route_index: {\n      get() {\n        return this.$store.state.curr_route_index;\n      },\n\n      set(value) {\n        this.$store.commit('updateRouteIndex', value);\n      }\n\n    }\n  },\n  methods: {\n    nextSection: function () {\n      this.$router.push({\n        name: 'brokerageAuthority'\n      });\n    },\n\n    setRoutes() {\n      const self = this;\n      const routes = this.$router.getRoutes();\n      let route_index = 0;\n      this.curr_route = this.$router.currentRoute.value;\n      routes.forEach(function (route, index) {\n        if (route.name === self.curr_route.name) {\n          route_index = index;\n        }\n      });\n      this.route_index = route_index;\n    },\n\n    abbrState(input, to) {\n      var states = [['Arizona', 'AZ'], ['Alabama', 'AL'], ['Alaska', 'AK'], ['Arkansas', 'AR'], ['California', 'CA'], ['Colorado', 'CO'], ['Connecticut', 'CT'], ['Delaware', 'DE'], ['Florida', 'FL'], ['Georgia', 'GA'], ['Hawaii', 'HI'], ['Idaho', 'ID'], ['Illinois', 'IL'], ['Indiana', 'IN'], ['Iowa', 'IA'], ['Kansas', 'KS'], ['Kentucky', 'KY'], ['Louisiana', 'LA'], ['Maine', 'ME'], ['Maryland', 'MD'], ['Massachusetts', 'MA'], ['Michigan', 'MI'], ['Minnesota', 'MN'], ['Mississippi', 'MS'], ['Missouri', 'MO'], ['Montana', 'MT'], ['Nebraska', 'NE'], ['Nevada', 'NV'], ['New Hampshire', 'NH'], ['New Jersey', 'NJ'], ['New Mexico', 'NM'], ['New York', 'NY'], ['North Carolina', 'NC'], ['North Dakota', 'ND'], ['Ohio', 'OH'], ['Oklahoma', 'OK'], ['Oregon', 'OR'], ['Pennsylvania', 'PA'], ['Rhode Island', 'RI'], ['South Carolina', 'SC'], ['South Dakota', 'SD'], ['Tennessee', 'TN'], ['Texas', 'TX'], ['Utah', 'UT'], ['Vermont', 'VT'], ['Virginia', 'VA'], ['Washington', 'WA'], ['West Virginia', 'WV'], ['Wisconsin', 'WI'], ['Wyoming', 'WY']];\n      /* eslint-disable no-undef */\n\n      if (to == 'abbr') {\n        input = input.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        });\n\n        for (i = 0; i < states.length; i++) {\n          if (states[i][0] == input) {\n            return states[i][1];\n          }\n        }\n      } else if (to == 'name') {\n        input = input.toUpperCase();\n\n        for (i = 0; i < states.length; i++) {\n          if (states[i][1] == input) {\n            return states[i][0];\n          }\n        }\n      }\n    },\n\n    createProspect() {\n      const data = {\n        firstname: this.$store.state.usdot_data.contactFirstName,\n        lastname: this.$store.state.usdot_data.contactLastName,\n        company: this.$store.state.usdot_data.legalName,\n        email: this.$store.state.usdot_data.contactEmail,\n        phone: this.$store.state.usdot_data.contactPhone,\n        city: this.$store.state.usdot_data.phyCity,\n        state: this.abbrState(this.$store.state.usdot_data.phyState),\n        postal: this.$store.state.usdot_data.phyZipcode\n      };\n      console.log(data);\n      console.log(this.abbrState(this.$store.state.usdot_data.phyState)); // fetch(`https://flywheel.giganticdesign.com/swagger/create-prospect.php?firstname=${data.firstname}&lastname=${data.lastname}&company=${data.company}&email=${data.email}&phone=${data.phone}&city=${data.city}&state=${data.state}&postal=${data.postal}`)\n      // .then((response) => response.json())\n      // .then((data) => console.log(data));\n      // fetch('https://flywheel.giganticdesign.com/swagger/create-prospect.php', {\n      // \tmethod: 'POST',\n      // \theaders: {\n      // \t\t'Content-Type': 'application/json',\n      // \t},\n      // body: JSON.stringify(data),\n      // })\n      // .then((response) => response.json())\n      // .then((data) => {\n      // \tconsole.log('Success:', data);\n      // })\n      // .catch((error) => {\n      // \tconsole.error('Error:', error);\n      // });\n    }\n\n  },\n\n  mounted() {\n    this.setRoutes();\n    this.createProspect();\n  }\n\n};","map":{"version":3,"mappings":"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","names":["mapState","BaseInput","name","components","computed","insurance_effective_date","state","get","$store","set","value","commit","route_index","curr_route_index","methods","nextSection","$router","push","setRoutes","self","routes","getRoutes","curr_route","currentRoute","forEach","route","index","abbrState","input","to","states","replace","txt","charAt","toUpperCase","substr","toLowerCase","i","length","createProspect","data","firstname","usdot_data","contactFirstName","lastname","contactLastName","company","legalName","email","contactEmail","phone","contactPhone","city","phyCity","phyState","postal","phyZipcode","console","log","mounted"],"sourceRoot":"","sources":["/Users/lukedavid/Web/newco/src/views/InsuranceEffectiveDate.vue"],"sourcesContent":["<template>\n\t<Transition appear>\n\t\t<div class=\"tw-card\">\n\t\t\t<h1 class=\"tw-heading\">Insurance Effective Date?</h1>\n\t\t\t<div class=\"max-w-sm m-auto text-left\">\n\t\t\t\t<BaseInput type=\"date\" id=\"insurance_effective_date\" label=\"Date\" max=\"999-12-31\" v-model=\"insurance_effective_date\" />\n\t\t\t\t<button type=\"button\" class=\"tw-btn mt-5 block m-auto\" @click=\"nextSection\">Next</button>\n\t\t\t</div>\n\t\t</div>\n\t</Transition>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport BaseInput from \"@/components/BaseInput.vue\";\n\nexport default {\n\tname: 'InsuranceEffectiveDate',\n\tcomponents: {\n\t\tBaseInput,\n\t},\n\tcomputed: {\n\t\t...mapState({\n\t\t\tinsurance_effective_date: state => state.insurance_effective_date\n\t\t}),\n\t\tinsurance_effective_date: {\n\t\t\tget() {\n\t\t\t\treturn this.$store.state.insurance_effective_date;\n\t\t\t},\n\t\t\tset(value) {\n\t\t\t\tthis.$store.commit('updateInsuranceEffectiveDate', value);\n\t\t\t}\n\t\t},\n\t\troute_index: {\n\t\t\tget() {\n\t\t\t\treturn this.$store.state.curr_route_index;\n\t\t\t},\n\t\t\tset(value) {\n\t\t\t\tthis.$store.commit('updateRouteIndex', value);\n\t\t\t}\n\t\t}\n\t},\n\tmethods: {\n\t\tnextSection: function() {\n\t\t\tthis.$router.push({name: 'brokerageAuthority'});\n\t\t},\n\t\tsetRoutes() {\n\t\t\tconst self = this;\n\t\t\tconst routes = this.$router.getRoutes();\n\t\t\tlet route_index = 0;\n\n\t\t\tthis.curr_route = this.$router.currentRoute.value;\n\t\t\t\t\n\t\t\troutes.forEach(function(route, index){\n\t\t\t\tif(route.name === self.curr_route.name) {\n\t\t\t\t\troute_index = index;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.route_index = route_index;\n\t\t},\n\t\tabbrState(input, to) {\n\t\t\tvar states = [\n\t\t\t\t['Arizona', 'AZ'],\n\t\t\t\t['Alabama', 'AL'],\n\t\t\t\t['Alaska', 'AK'],\n\t\t\t\t['Arkansas', 'AR'],\n\t\t\t\t['California', 'CA'],\n\t\t\t\t['Colorado', 'CO'],\n\t\t\t\t['Connecticut', 'CT'],\n\t\t\t\t['Delaware', 'DE'],\n\t\t\t\t['Florida', 'FL'],\n\t\t\t\t['Georgia', 'GA'],\n\t\t\t\t['Hawaii', 'HI'],\n\t\t\t\t['Idaho', 'ID'],\n\t\t\t\t['Illinois', 'IL'],\n\t\t\t\t['Indiana', 'IN'],\n\t\t\t\t['Iowa', 'IA'],\n\t\t\t\t['Kansas', 'KS'],\n\t\t\t\t['Kentucky', 'KY'],\n\t\t\t\t['Louisiana', 'LA'],\n\t\t\t\t['Maine', 'ME'],\n\t\t\t\t['Maryland', 'MD'],\n\t\t\t\t['Massachusetts', 'MA'],\n\t\t\t\t['Michigan', 'MI'],\n\t\t\t\t['Minnesota', 'MN'],\n\t\t\t\t['Mississippi', 'MS'],\n\t\t\t\t['Missouri', 'MO'],\n\t\t\t\t['Montana', 'MT'],\n\t\t\t\t['Nebraska', 'NE'],\n\t\t\t\t['Nevada', 'NV'],\n\t\t\t\t['New Hampshire', 'NH'],\n\t\t\t\t['New Jersey', 'NJ'],\n\t\t\t\t['New Mexico', 'NM'],\n\t\t\t\t['New York', 'NY'],\n\t\t\t\t['North Carolina', 'NC'],\n\t\t\t\t['North Dakota', 'ND'],\n\t\t\t\t['Ohio', 'OH'],\n\t\t\t\t['Oklahoma', 'OK'],\n\t\t\t\t['Oregon', 'OR'],\n\t\t\t\t['Pennsylvania', 'PA'],\n\t\t\t\t['Rhode Island', 'RI'],\n\t\t\t\t['South Carolina', 'SC'],\n\t\t\t\t['South Dakota', 'SD'],\n\t\t\t\t['Tennessee', 'TN'],\n\t\t\t\t['Texas', 'TX'],\n\t\t\t\t['Utah', 'UT'],\n\t\t\t\t['Vermont', 'VT'],\n\t\t\t\t['Virginia', 'VA'],\n\t\t\t\t['Washington', 'WA'],\n\t\t\t\t['West Virginia', 'WV'],\n\t\t\t\t['Wisconsin', 'WI'],\n\t\t\t\t['Wyoming', 'WY'],\n\t\t\t];\n\t\t\t/* eslint-disable no-undef */\n\t\t\tif (to == 'abbr'){\n\t\t\t\tinput = input.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n\t\t\t\tfor(i = 0; i < states.length; i++){\n\t\t\t\t\tif(states[i][0] == input){\n\t\t\t\t\t\treturn(states[i][1]);\n\t\t\t\t\t}\n\t\t\t\t}    \n\t\t\t} else if (to == 'name'){\n\t\t\t\tinput = input.toUpperCase();\n\t\t\t\tfor(i = 0; i < states.length; i++){\n\t\t\t\t\tif(states[i][1] == input){\n\t\t\t\t\t\treturn(states[i][0]);\n\t\t\t\t\t}\n\t\t\t\t}    \n\t\t\t}\n\t\t},\t\n\t\tcreateProspect(){\n\t\t\tconst data = { \n\t\t\t\tfirstname: this.$store.state.usdot_data.contactFirstName,\n\t\t\t\tlastname: this.$store.state.usdot_data.contactLastName,\n\t\t\t\tcompany: this.$store.state.usdot_data.legalName,\n\t\t\t\temail: this.$store.state.usdot_data.contactEmail,\n\t\t\t\tphone: this.$store.state.usdot_data.contactPhone,\n\t\t\t\tcity: this.$store.state.usdot_data.phyCity,\n\t\t\t\tstate: this.abbrState(this.$store.state.usdot_data.phyState),\n\t\t\t\tpostal: this.$store.state.usdot_data.phyZipcode,\n\t\t\t};\n\t\t\tconsole.log(data);\n\t\t\tconsole.log(this.abbrState(this.$store.state.usdot_data.phyState));\n\n\t\t\t// fetch(`https://flywheel.giganticdesign.com/swagger/create-prospect.php?firstname=${data.firstname}&lastname=${data.lastname}&company=${data.company}&email=${data.email}&phone=${data.phone}&city=${data.city}&state=${data.state}&postal=${data.postal}`)\n\t\t\t// .then((response) => response.json())\n\t\t\t// .then((data) => console.log(data));\n\n\t\t\t// fetch('https://flywheel.giganticdesign.com/swagger/create-prospect.php', {\n\t\t\t// \tmethod: 'POST',\n\t\t\t// \theaders: {\n\t\t\t// \t\t'Content-Type': 'application/json',\n\t\t\t// \t},\n\t\t\t// body: JSON.stringify(data),\n\t\t\t// })\n\t\t\t// .then((response) => response.json())\n\t\t\t// .then((data) => {\n\t\t\t// \tconsole.log('Success:', data);\n\t\t\t// })\n\t\t\t// .catch((error) => {\n\t\t\t// \tconsole.error('Error:', error);\n\t\t\t// });\n\t\t}\n\t},\n\tmounted() {\n\t\tthis.setRoutes();\n\t\tthis.createProspect();\n\n\t}\n}\n</script>"]},"metadata":{},"sourceType":"module"}