{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\n\n/**\n  * vee-validate v4.6.1\n  * (c) 2022 Abdelrahman Awad\n  * @license MIT\n  */\nimport { inject, getCurrentInstance, warn as warn$1, ref, unref, computed, reactive, watch, onUnmounted, nextTick, onMounted, provide, isRef, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, watchEffect, markRaw } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nfunction isCallable(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\n\nconst isObject = obj => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\n\nfunction isIndex(value) {\n  return Number(value) >= 0;\n}\n\nfunction toNumber(value) {\n  const n = parseFloat(value);\n  return isNaN(n) ? value : n;\n}\n\nconst RULES = {};\n/**\r\n * Adds a custom validator to the list of validation rules.\r\n */\n\nfunction defineRule(id, validator) {\n  // makes sure new rules are properly formatted.\n  guardExtend(id, validator);\n  RULES[id] = validator;\n}\n/**\r\n * Gets an already defined rule\r\n */\n\n\nfunction resolveRule(id) {\n  return RULES[id];\n}\n/**\r\n * Guards from extension violations.\r\n */\n\n\nfunction guardExtend(id, validator) {\n  if (isCallable(validator)) {\n    return;\n  }\n\n  throw new Error(`Extension Error: The validator '${id}' must be a function.`);\n}\n\nconst FormContextKey = Symbol('vee-validate-form');\nconst FieldContextKey = Symbol('vee-validate-field-instance');\nconst IS_ABSENT = Symbol('Default empty value');\n\nfunction isLocator(value) {\n  return isCallable(value) && !!value.__locatorRef;\n}\n\nfunction isYupValidator(value) {\n  return !!value && isCallable(value.validate);\n}\n\nfunction hasCheckedAttr(type) {\n  return type === 'checkbox' || type === 'radio';\n}\n\nfunction isContainerValue(value) {\n  return isObject(value) || Array.isArray(value);\n}\n/**\r\n * True if the value is an empty object or array\r\n */\n\n\nfunction isEmptyContainer(value) {\n  if (Array.isArray(value)) {\n    return value.length === 0;\n  }\n\n  return isObject(value) && Object.keys(value).length === 0;\n}\n/**\r\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\r\n */\n\n\nfunction isNotNestedPath(path) {\n  return /^\\[.+\\]$/i.test(path);\n}\n/**\r\n * Checks if an element is a native HTML5 multi-select input element\r\n */\n\n\nfunction isNativeMultiSelect(el) {\n  return isNativeSelect(el) && el.multiple;\n}\n/**\r\n * Checks if an element is a native HTML5 select input element\r\n */\n\n\nfunction isNativeSelect(el) {\n  return el.tagName === 'SELECT';\n}\n/**\r\n * Checks if a tag name with attrs object will render a native multi-select element\r\n */\n\n\nfunction isNativeMultiSelectNode(tag, attrs) {\n  // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\n  const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\n  return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\n}\n/**\r\n * Checks if a node should have a `:value` binding or not\r\n *\r\n * These nodes should not have a value binding\r\n * For files, because they are not reactive\r\n * For multi-selects because the value binding will reset the value\r\n */\n\n\nfunction shouldHaveValueBinding(tag, attrs) {\n  return !isNativeMultiSelectNode(tag, attrs) && attrs.type !== 'file' && !hasCheckedAttr(attrs.type);\n}\n\nfunction isFormSubmitEvent(evt) {\n  return isEvent(evt) && evt.target && 'submit' in evt.target;\n}\n\nfunction isEvent(evt) {\n  if (!evt) {\n    return false;\n  }\n\n  if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\n    return true;\n  } // this is for IE and Cypress #3161\n\n  /* istanbul ignore next */\n\n\n  if (evt && evt.srcElement) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isPropPresent(obj, prop) {\n  return prop in obj && obj[prop] !== IS_ABSENT;\n}\n\nfunction cleanupNonNestedPath(path) {\n  if (isNotNestedPath(path)) {\n    return path.replace(/\\[|\\]/gi, '');\n  }\n\n  return path;\n}\n\nfunction getFromPath(object, path, fallback) {\n  if (!object) {\n    return fallback;\n  }\n\n  if (isNotNestedPath(path)) {\n    return object[cleanupNonNestedPath(path)];\n  }\n\n  const resolvedValue = (path || '').split(/\\.|\\[(\\d+)\\]/).filter(Boolean).reduce((acc, propKey) => {\n    if (isContainerValue(acc) && propKey in acc) {\n      return acc[propKey];\n    }\n\n    return fallback;\n  }, object);\n  return resolvedValue;\n}\n/**\r\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\r\n */\n\n\nfunction setInPath(object, path, value) {\n  if (isNotNestedPath(path)) {\n    object[cleanupNonNestedPath(path)] = value;\n    return;\n  }\n\n  const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n  let acc = object;\n\n  for (let i = 0; i < keys.length; i++) {\n    // Last key, set it\n    if (i === keys.length - 1) {\n      acc[keys[i]] = value;\n      return;\n    } // Key does not exist, create a container for it\n\n\n    if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n      // container can be either an object or an array depending on the next key if it exists\n      acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\n    }\n\n    acc = acc[keys[i]];\n  }\n}\n\nfunction unset(object, key) {\n  if (Array.isArray(object) && isIndex(key)) {\n    object.splice(Number(key), 1);\n    return;\n  }\n\n  if (isObject(object)) {\n    delete object[key];\n  }\n}\n/**\r\n * Removes a nested property from object\r\n */\n\n\nfunction unsetPath(object, path) {\n  if (isNotNestedPath(path)) {\n    delete object[cleanupNonNestedPath(path)];\n    return;\n  }\n\n  const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n  let acc = object;\n\n  for (let i = 0; i < keys.length; i++) {\n    // Last key, unset it\n    if (i === keys.length - 1) {\n      unset(acc, keys[i]);\n      break;\n    } // Key does not exist, exit\n\n\n    if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n      break;\n    }\n\n    acc = acc[keys[i]];\n  }\n\n  const pathValues = keys.map((_, idx) => {\n    return getFromPath(object, keys.slice(0, idx).join('.'));\n  });\n\n  for (let i = pathValues.length - 1; i >= 0; i--) {\n    if (!isEmptyContainer(pathValues[i])) {\n      continue;\n    }\n\n    if (i === 0) {\n      unset(object, keys[0]);\n      continue;\n    }\n\n    unset(pathValues[i - 1], keys[i - 1]);\n  }\n}\n/**\r\n * A typed version of Object.keys\r\n */\n\n\nfunction keysOf(record) {\n  return Object.keys(record);\n} // Uses same component provide as its own injections\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\n\n\nfunction injectWithSelf(symbol, def = undefined) {\n  const vm = getCurrentInstance();\n  return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\n}\n\nfunction warn(message) {\n  warn$1(`[vee-validate]: ${message}`);\n}\n/**\r\n * Ensures we deal with a singular field value\r\n */\n\n\nfunction normalizeField(field) {\n  if (Array.isArray(field)) {\n    return field[0];\n  }\n\n  return field;\n}\n\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\n  if (Array.isArray(currentValue)) {\n    const newVal = [...currentValue];\n    const idx = newVal.indexOf(checkedValue);\n    idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\n    return newVal;\n  }\n\n  return currentValue === checkedValue ? uncheckedValue : checkedValue;\n}\n/**\r\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\r\n * (`limit`)\r\n */\n\n\nfunction throttle(func, limit) {\n  let inThrottle;\n  let lastResult;\n  return function (...args) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const context = this;\n\n    if (!inThrottle) {\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n      lastResult = func.apply(context, args);\n    }\n\n    return lastResult;\n  };\n}\n\nfunction debounceAsync(inner, ms = 0) {\n  let timer = null;\n  let resolves = [];\n  return function (...args) {\n    // Run the function after a certain amount of time\n    if (timer) {\n      window.clearTimeout(timer);\n    }\n\n    timer = window.setTimeout(() => {\n      // Get the result of the inner function, then apply it to the resolve function of\n      // each promise that has been created since the last time the inner function was run\n      const result = inner(...args);\n      resolves.forEach(r => r(result));\n      resolves = [];\n    }, ms);\n    return new Promise(resolve => resolves.push(resolve));\n  };\n}\n\nfunction applyModelModifiers(value, modifiers) {\n  if (!isObject(modifiers)) {\n    return;\n  }\n\n  if (modifiers.number) {\n    return toNumber(value);\n  }\n\n  return value;\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nconst normalizeChildren = (tag, context, slotProps) => {\n  if (!context.slots.default) {\n    return context.slots.default;\n  }\n\n  if (typeof tag === 'string' || !tag) {\n    return context.slots.default(slotProps());\n  }\n\n  return {\n    default: () => {\n      var _a, _b;\n\n      return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps());\n    }\n  };\n};\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\n\n\nfunction getBoundValue(el) {\n  if (hasValueBinding(el)) {\n    return el._value;\n  }\n\n  return undefined;\n}\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\n\n\nfunction hasValueBinding(el) {\n  return '_value' in el;\n}\n\nfunction normalizeEventValue(value) {\n  if (!isEvent(value)) {\n    return value;\n  }\n\n  const input = value.target; // Vue sets the current bound value on `_value` prop\n  // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\n\n  if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\n    return getBoundValue(input);\n  }\n\n  if (input.type === 'file' && input.files) {\n    const files = Array.from(input.files);\n    return input.multiple ? files : files[0];\n  }\n\n  if (isNativeMultiSelect(input)) {\n    return Array.from(input.options).filter(opt => opt.selected && !opt.disabled).map(getBoundValue);\n  } // makes sure we get the actual `option` bound value\n  // #3440\n\n\n  if (isNativeSelect(input)) {\n    const selectedOption = Array.from(input.options).find(opt => opt.selected);\n    return selectedOption ? getBoundValue(selectedOption) : input.value;\n  }\n\n  return input.value;\n}\n/**\r\n * Normalizes the given rules expression.\r\n */\n\n\nfunction normalizeRules(rules) {\n  const acc = {};\n  Object.defineProperty(acc, '_$$isNormalized', {\n    value: true,\n    writable: false,\n    enumerable: false,\n    configurable: false\n  });\n\n  if (!rules) {\n    return acc;\n  } // Object is already normalized, skip.\n\n\n  if (isObject(rules) && rules._$$isNormalized) {\n    return rules;\n  }\n\n  if (isObject(rules)) {\n    return Object.keys(rules).reduce((prev, curr) => {\n      const params = normalizeParams(rules[curr]);\n\n      if (rules[curr] !== false) {\n        prev[curr] = buildParams(params);\n      }\n\n      return prev;\n    }, acc);\n  }\n  /* istanbul ignore if */\n\n\n  if (typeof rules !== 'string') {\n    return acc;\n  }\n\n  return rules.split('|').reduce((prev, rule) => {\n    const parsedRule = parseRule(rule);\n\n    if (!parsedRule.name) {\n      return prev;\n    }\n\n    prev[parsedRule.name] = buildParams(parsedRule.params);\n    return prev;\n  }, acc);\n}\n/**\r\n * Normalizes a rule param.\r\n */\n\n\nfunction normalizeParams(params) {\n  if (params === true) {\n    return [];\n  }\n\n  if (Array.isArray(params)) {\n    return params;\n  }\n\n  if (isObject(params)) {\n    return params;\n  }\n\n  return [params];\n}\n\nfunction buildParams(provided) {\n  const mapValueToLocator = value => {\n    // A target param using interpolation\n    if (typeof value === 'string' && value[0] === '@') {\n      return createLocator(value.slice(1));\n    }\n\n    return value;\n  };\n\n  if (Array.isArray(provided)) {\n    return provided.map(mapValueToLocator);\n  } // #3073\n\n\n  if (provided instanceof RegExp) {\n    return [provided];\n  }\n\n  return Object.keys(provided).reduce((prev, key) => {\n    prev[key] = mapValueToLocator(provided[key]);\n    return prev;\n  }, {});\n}\n/**\r\n * Parses a rule string expression.\r\n */\n\n\nconst parseRule = rule => {\n  let params = [];\n  const name = rule.split(':')[0];\n\n  if (rule.includes(':')) {\n    params = rule.split(':').slice(1).join(':').split(',');\n  }\n\n  return {\n    name,\n    params\n  };\n};\n\nfunction createLocator(value) {\n  const locator = crossTable => {\n    const val = getFromPath(crossTable, value) || crossTable[value];\n    return val;\n  };\n\n  locator.__locatorRef = value;\n  return locator;\n}\n\nfunction extractLocators(params) {\n  if (Array.isArray(params)) {\n    return params.filter(isLocator);\n  }\n\n  return keysOf(params).filter(key => isLocator(params[key])).map(key => params[key]);\n}\n\nconst DEFAULT_CONFIG = {\n  generateMessage: ({\n    field\n  }) => `${field} is not valid.`,\n  bails: true,\n  validateOnBlur: true,\n  validateOnChange: true,\n  validateOnInput: false,\n  validateOnModelUpdate: true\n};\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\n\nconst getConfig = () => currentConfig;\n\nconst setConfig = newConf => {\n  currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\n};\n\nconst configure = setConfig;\n/**\r\n * Validates a value against the rules.\r\n */\n\nasync function validate(value, rules, options = {}) {\n  const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\n  const field = {\n    name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\n    rules,\n    bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\n    formData: (options === null || options === void 0 ? void 0 : options.values) || {}\n  };\n  const result = await _validate(field, value);\n  const errors = result.errors;\n  return {\n    errors,\n    valid: !errors.length\n  };\n}\n/**\r\n * Starts the validation process.\r\n */\n\n\nasync function _validate(field, value) {\n  if (isYupValidator(field.rules)) {\n    return validateFieldWithYup(value, field.rules, {\n      bails: field.bails\n    });\n  } // if a generic function or chain of generic functions\n\n\n  if (isCallable(field.rules) || Array.isArray(field.rules)) {\n    const ctx = {\n      field: field.name,\n      form: field.formData,\n      value: value\n    }; // Normalize the pipeline\n\n    const pipeline = Array.isArray(field.rules) ? field.rules : [field.rules];\n    const length = pipeline.length;\n    const errors = [];\n\n    for (let i = 0; i < length; i++) {\n      const rule = pipeline[i];\n      const result = await rule(value, ctx);\n      const isValid = typeof result !== 'string' && result;\n\n      if (isValid) {\n        continue;\n      }\n\n      const message = typeof result === 'string' ? result : _generateFieldError(ctx);\n      errors.push(message);\n\n      if (field.bails) {\n        return {\n          errors\n        };\n      }\n    }\n\n    return {\n      errors\n    };\n  }\n\n  const normalizedContext = Object.assign(Object.assign({}, field), {\n    rules: normalizeRules(field.rules)\n  });\n  const errors = [];\n  const rulesKeys = Object.keys(normalizedContext.rules);\n  const length = rulesKeys.length;\n\n  for (let i = 0; i < length; i++) {\n    const rule = rulesKeys[i];\n    const result = await _test(normalizedContext, value, {\n      name: rule,\n      params: normalizedContext.rules[rule]\n    });\n\n    if (result.error) {\n      errors.push(result.error);\n\n      if (field.bails) {\n        return {\n          errors\n        };\n      }\n    }\n  }\n\n  return {\n    errors\n  };\n}\n/**\r\n * Handles yup validation\r\n */\n\n\nasync function validateFieldWithYup(value, validator, opts) {\n  var _a;\n\n  const errors = await validator.validate(value, {\n    abortEarly: (_a = opts.bails) !== null && _a !== void 0 ? _a : true\n  }).then(() => []).catch(err => {\n    // Yup errors have a name prop one them.\n    // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n    if (err.name === 'ValidationError') {\n      return err.errors;\n    } // re-throw the error so we don't hide it\n\n\n    throw err;\n  });\n  return {\n    errors\n  };\n}\n/**\r\n * Tests a single input value against a rule.\r\n */\n\n\nasync function _test(field, value, rule) {\n  const validator = resolveRule(rule.name);\n\n  if (!validator) {\n    throw new Error(`No such validator '${rule.name}' exists.`);\n  }\n\n  const params = fillTargetValues(rule.params, field.formData);\n  const ctx = {\n    field: field.name,\n    value,\n    form: field.formData,\n    rule: Object.assign(Object.assign({}, rule), {\n      params\n    })\n  };\n  const result = await validator(value, params, ctx);\n\n  if (typeof result === 'string') {\n    return {\n      error: result\n    };\n  }\n\n  return {\n    error: result ? undefined : _generateFieldError(ctx)\n  };\n}\n/**\r\n * Generates error messages.\r\n */\n\n\nfunction _generateFieldError(fieldCtx) {\n  const message = getConfig().generateMessage;\n\n  if (!message) {\n    return 'Field is invalid';\n  }\n\n  return message(fieldCtx);\n}\n\nfunction fillTargetValues(params, crossTable) {\n  const normalize = value => {\n    if (isLocator(value)) {\n      return value(crossTable);\n    }\n\n    return value;\n  };\n\n  if (Array.isArray(params)) {\n    return params.map(normalize);\n  }\n\n  return Object.keys(params).reduce((acc, param) => {\n    acc[param] = normalize(params[param]);\n    return acc;\n  }, {});\n}\n\nasync function validateYupSchema(schema, values) {\n  const errorObjects = await schema.validate(values, {\n    abortEarly: false\n  }).then(() => []).catch(err => {\n    // Yup errors have a name prop one them.\n    // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n    if (err.name !== 'ValidationError') {\n      throw err;\n    } // list of aggregated errors\n\n\n    return err.inner || [];\n  });\n  const results = {};\n  const errors = {};\n\n  for (const error of errorObjects) {\n    const messages = error.errors;\n    results[error.path] = {\n      valid: !messages.length,\n      errors: messages\n    };\n\n    if (messages.length) {\n      errors[error.path] = messages[0];\n    }\n  }\n\n  return {\n    valid: !errorObjects.length,\n    results,\n    errors\n  };\n}\n\nasync function validateObjectSchema(schema, values, opts) {\n  const paths = keysOf(schema);\n  const validations = paths.map(async path => {\n    var _a, _b, _c;\n\n    const fieldResult = await validate(getFromPath(values, path), schema[path], {\n      name: ((_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path]) || path,\n      values: values,\n      bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true\n    });\n    return Object.assign(Object.assign({}, fieldResult), {\n      path\n    });\n  });\n  let isAllValid = true;\n  const validationResults = await Promise.all(validations);\n  const results = {};\n  const errors = {};\n\n  for (const result of validationResults) {\n    results[result.path] = {\n      valid: result.valid,\n      errors: result.errors\n    };\n\n    if (!result.valid) {\n      isAllValid = false;\n      errors[result.path] = result.errors[0];\n    }\n  }\n\n  return {\n    valid: isAllValid,\n    results,\n    errors\n  };\n}\n\nfunction set(obj, key, val) {\n  if (typeof val.value === 'object') val.value = klona(val.value);\n\n  if (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n    Object.defineProperty(obj, key, val);\n  } else obj[key] = val.value;\n}\n\nfunction klona(x) {\n  if (typeof x !== 'object') return x;\n  var i = 0,\n      k,\n      list,\n      tmp,\n      str = Object.prototype.toString.call(x);\n\n  if (str === '[object Object]') {\n    tmp = Object.create(x.__proto__ || null);\n  } else if (str === '[object Array]') {\n    tmp = Array(x.length);\n  } else if (str === '[object Set]') {\n    tmp = new Set();\n    x.forEach(function (val) {\n      tmp.add(klona(val));\n    });\n  } else if (str === '[object Map]') {\n    tmp = new Map();\n    x.forEach(function (val, key) {\n      tmp.set(klona(key), klona(val));\n    });\n  } else if (str === '[object Date]') {\n    tmp = new Date(+x);\n  } else if (str === '[object RegExp]') {\n    tmp = new RegExp(x.source, x.flags);\n  } else if (str === '[object DataView]') {\n    tmp = new x.constructor(klona(x.buffer));\n  } else if (str === '[object ArrayBuffer]') {\n    tmp = x.slice(0);\n  } else if (str.slice(-6) === 'Array]') {\n    // ArrayBuffer.isView(x)\n    // ~> `new` bcuz `Buffer.slice` => ref\n    tmp = new x.constructor(x);\n  }\n\n  if (tmp) {\n    for (list = Object.getOwnPropertySymbols(x); i < list.length; i++) {\n      set(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n    }\n\n    for (i = 0, list = Object.getOwnPropertyNames(x); i < list.length; i++) {\n      if (Object.hasOwnProperty.call(tmp, k = list[i]) && tmp[k] === x[k]) continue;\n      set(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n    }\n  }\n\n  return tmp || x;\n}\n\nvar es6 = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n    var length, i, keys;\n\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n\n      for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;\n\n      return true;\n    }\n\n    if (a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) return false;\n\n      for (i of a.entries()) if (!b.has(i[0])) return false;\n\n      for (i of a.entries()) if (!equal(i[1], b.get(i[0]))) return false;\n\n      return true;\n    }\n\n    if (a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) return false;\n\n      for (i of a.entries()) if (!b.has(i[0])) return false;\n\n      return true;\n    }\n\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n\n      for (i = length; i-- !== 0;) if (a[i] !== b[i]) return false;\n\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  } // true if both NaN, false otherwise\n\n\n  return a !== a && b !== b;\n};\n\nlet ID_COUNTER = 0;\n\nfunction useFieldState(path, init) {\n  const {\n    value,\n    initialValue,\n    setInitialValue\n  } = _useFieldValue(path, init.modelValue, !init.standalone);\n\n  const {\n    errorMessage,\n    errors,\n    setErrors\n  } = _useFieldErrors(path, !init.standalone);\n\n  const meta = _useFieldMeta(value, initialValue, errors);\n\n  const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\n\n  function setState(state) {\n    var _a;\n\n    if ('value' in state) {\n      value.value = state.value;\n    }\n\n    if ('errors' in state) {\n      setErrors(state.errors);\n    }\n\n    if ('touched' in state) {\n      meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\n    }\n\n    if ('initialValue' in state) {\n      setInitialValue(state.initialValue);\n    }\n  }\n\n  return {\n    id,\n    path,\n    value,\n    initialValue,\n    meta,\n    errors,\n    errorMessage,\n    setState\n  };\n}\n/**\r\n * Creates the field value and resolves the initial value\r\n */\n\n\nfunction _useFieldValue(path, modelValue, shouldInjectForm = true) {\n  const form = shouldInjectForm === true ? injectWithSelf(FormContextKey, undefined) : undefined;\n  const modelRef = ref(unref(modelValue));\n\n  function resolveInitialValue() {\n    if (!form) {\n      return unref(modelRef);\n    }\n\n    return getFromPath(form.meta.value.initialValues, unref(path), unref(modelRef));\n  }\n\n  function setInitialValue(value) {\n    if (!form) {\n      modelRef.value = value;\n      return;\n    }\n\n    form.setFieldInitialValue(unref(path), value);\n  }\n\n  const initialValue = computed(resolveInitialValue); // if no form is associated, use a regular ref.\n\n  if (!form) {\n    const value = ref(resolveInitialValue());\n    return {\n      value,\n      initialValue,\n      setInitialValue\n    };\n  } // to set the initial value, first check if there is a current value, if there is then use it.\n  // otherwise use the configured initial value if it exists.\n  // prioritize model value over form values\n  // #3429\n\n\n  const currentValue = modelValue ? unref(modelValue) : getFromPath(form.values, unref(path), unref(initialValue));\n  form.stageInitialValue(unref(path), currentValue, true); // otherwise use a computed setter that triggers the `setFieldValue`\n\n  const value = computed({\n    get() {\n      return getFromPath(form.values, unref(path));\n    },\n\n    set(newVal) {\n      form.setFieldValue(unref(path), newVal);\n    }\n\n  });\n  return {\n    value,\n    initialValue,\n    setInitialValue\n  };\n}\n/**\r\n * Creates meta flags state and some associated effects with them\r\n */\n\n\nfunction _useFieldMeta(currentValue, initialValue, errors) {\n  const meta = reactive({\n    touched: false,\n    pending: false,\n    valid: true,\n    validated: !!unref(errors).length,\n    initialValue: computed(() => unref(initialValue)),\n    dirty: computed(() => {\n      return !es6(unref(currentValue), unref(initialValue));\n    })\n  });\n  watch(errors, value => {\n    meta.valid = !value.length;\n  }, {\n    immediate: true,\n    flush: 'sync'\n  });\n  return meta;\n}\n/**\r\n * Creates the error message state for the field state\r\n */\n\n\nfunction _useFieldErrors(path, shouldInjectForm) {\n  const form = shouldInjectForm ? injectWithSelf(FormContextKey, undefined) : undefined;\n\n  function normalizeErrors(messages) {\n    if (!messages) {\n      return [];\n    }\n\n    return Array.isArray(messages) ? messages : [messages];\n  }\n\n  if (!form) {\n    const errors = ref([]);\n    return {\n      errors,\n      errorMessage: computed(() => errors.value[0]),\n      setErrors: messages => {\n        errors.value = normalizeErrors(messages);\n      }\n    };\n  }\n\n  const errors = computed(() => form.errorBag.value[unref(path)] || []);\n  return {\n    errors,\n    errorMessage: computed(() => errors.value[0]),\n    setErrors: messages => {\n      form.setFieldErrorBag(unref(path), normalizeErrors(messages));\n    }\n  };\n}\n\nfunction installDevtoolsPlugin(app) {\n  if (process.env.NODE_ENV !== 'production') {\n    setupDevtoolsPlugin({\n      id: 'vee-validate-devtools-plugin',\n      label: 'VeeValidate Plugin',\n      packageName: 'vee-validate',\n      homepage: 'https://vee-validate.logaretm.com/v4',\n      app,\n      logo: 'https://vee-validate.logaretm.com/v4/logo.png'\n    }, setupApiHooks);\n  }\n}\n\nconst DEVTOOLS_FORMS = {};\nconst DEVTOOLS_FIELDS = {};\nlet API;\nconst refreshInspector = throttle(() => {\n  setTimeout(async () => {\n    await nextTick();\n    API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\n    API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\n  }, 100);\n}, 100);\n\nfunction registerFormWithDevTools(form) {\n  const vm = getCurrentInstance();\n\n  if (!API) {\n    const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n\n    if (!app) {\n      return;\n    }\n\n    installDevtoolsPlugin(app);\n  }\n\n  DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\n  DEVTOOLS_FORMS[form.formId]._vm = vm;\n  onUnmounted(() => {\n    delete DEVTOOLS_FORMS[form.formId];\n    refreshInspector();\n  });\n  refreshInspector();\n}\n\nfunction registerSingleFieldWithDevtools(field) {\n  const vm = getCurrentInstance();\n\n  if (!API) {\n    const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n\n    if (!app) {\n      return;\n    }\n\n    installDevtoolsPlugin(app);\n  }\n\n  DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\n  DEVTOOLS_FIELDS[field.id]._vm = vm;\n  onUnmounted(() => {\n    delete DEVTOOLS_FIELDS[field.id];\n    refreshInspector();\n  });\n  refreshInspector();\n}\n\nconst INSPECTOR_ID = 'vee-validate-inspector';\nconst COLORS = {\n  error: 0xbd4b4b,\n  success: 0x06d77b,\n  unknown: 0x54436b,\n  white: 0xffffff,\n  black: 0x000000,\n  blue: 0x035397,\n  purple: 0xb980f0,\n  orange: 0xf5a962,\n  gray: 0xbbbfca\n};\nlet SELECTED_NODE = null;\n\nfunction setupApiHooks(api) {\n  API = api;\n  api.addInspector({\n    id: INSPECTOR_ID,\n    icon: 'rule',\n    label: 'vee-validate',\n    noSelectionText: 'Select a vee-validate node to inspect',\n    actions: [{\n      icon: 'done_outline',\n      tooltip: 'Validate selected item',\n      action: async () => {\n        if (!SELECTED_NODE) {\n          console.error('There is not a valid selected vee-validate node or component');\n          return;\n        }\n\n        const result = await SELECTED_NODE.validate();\n        console.log(result);\n      }\n    }, {\n      icon: 'delete_sweep',\n      tooltip: 'Clear validation state of the selected item',\n      action: () => {\n        if (!SELECTED_NODE) {\n          console.error('There is not a valid selected vee-validate node or component');\n          return;\n        }\n\n        if ('id' in SELECTED_NODE) {\n          SELECTED_NODE.resetField();\n          return;\n        }\n\n        SELECTED_NODE.resetForm();\n      }\n    }]\n  });\n  api.on.getInspectorTree(payload => {\n    if (payload.inspectorId !== INSPECTOR_ID) {\n      return;\n    }\n\n    const forms = Object.values(DEVTOOLS_FORMS);\n    const fields = Object.values(DEVTOOLS_FIELDS);\n    payload.rootNodes = [...forms.map(mapFormForDevtoolsInspector), ...fields.map(field => mapFieldForDevtoolsInspector(field))];\n  });\n  api.on.getInspectorState((payload, ctx) => {\n    if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\n      return;\n    }\n\n    const {\n      form,\n      field,\n      type\n    } = decodeNodeId(payload.nodeId);\n\n    if (form && type === 'form') {\n      payload.state = buildFormState(form);\n      SELECTED_NODE = form;\n      return;\n    }\n\n    if (field && type === 'field') {\n      payload.state = buildFieldState(field);\n      SELECTED_NODE = field;\n      return;\n    }\n\n    SELECTED_NODE = null;\n  });\n}\n\nfunction mapFormForDevtoolsInspector(form) {\n  const {\n    textColor,\n    bgColor\n  } = getTagTheme(form);\n  const formTreeNodes = {};\n  Object.values(form.fieldsByPath.value).forEach(field => {\n    const fieldInstance = Array.isArray(field) ? field[0] : field;\n\n    if (!fieldInstance) {\n      return;\n    }\n\n    setInPath(formTreeNodes, unref(fieldInstance.name), mapFieldForDevtoolsInspector(fieldInstance, form));\n  });\n\n  function buildFormTree(tree, path = []) {\n    const key = [...path].pop();\n\n    if ('id' in tree) {\n      return Object.assign(Object.assign({}, tree), {\n        label: key || tree.label\n      });\n    }\n\n    if (isObject(tree)) {\n      return {\n        id: `${path.join('.')}`,\n        label: key || '',\n        children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key]))\n      };\n    }\n\n    if (Array.isArray(tree)) {\n      return {\n        id: `${path.join('.')}`,\n        label: `${key}[]`,\n        children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)]))\n      };\n    }\n\n    return {\n      id: '',\n      label: '',\n      children: []\n    };\n  }\n\n  const {\n    children\n  } = buildFormTree(formTreeNodes);\n  return {\n    id: encodeNodeId(form),\n    label: 'Form',\n    children,\n    tags: [{\n      label: 'Form',\n      textColor,\n      backgroundColor: bgColor\n    }, {\n      label: `${Object.keys(form.fieldsByPath.value).length} fields`,\n      textColor: COLORS.white,\n      backgroundColor: COLORS.unknown\n    }]\n  };\n}\n\nfunction mapFieldForDevtoolsInspector(field, form) {\n  const fieldInstance = normalizeField(field);\n  const {\n    textColor,\n    bgColor\n  } = getTagTheme(fieldInstance);\n  const isGroup = Array.isArray(field) && field.length > 1;\n  return {\n    id: encodeNodeId(form, fieldInstance, !isGroup),\n    label: unref(fieldInstance.name),\n    children: Array.isArray(field) ? field.map(fieldItem => mapFieldForDevtoolsInspector(fieldItem, form)) : undefined,\n    tags: [isGroup ? undefined : {\n      label: 'Field',\n      textColor,\n      backgroundColor: bgColor\n    }, !form ? {\n      label: 'Standalone',\n      textColor: COLORS.black,\n      backgroundColor: COLORS.gray\n    } : undefined, !isGroup && fieldInstance.type === 'checkbox' ? {\n      label: 'Checkbox',\n      textColor: COLORS.white,\n      backgroundColor: COLORS.blue\n    } : undefined, !isGroup && fieldInstance.type === 'radio' ? {\n      label: 'Radio',\n      textColor: COLORS.white,\n      backgroundColor: COLORS.purple\n    } : undefined, isGroup ? {\n      label: 'Group',\n      textColor: COLORS.black,\n      backgroundColor: COLORS.orange\n    } : undefined].filter(Boolean)\n  };\n}\n\nfunction encodeNodeId(form, field, encodeIndex = true) {\n  const fieldPath = form ? unref(field === null || field === void 0 ? void 0 : field.name) : field === null || field === void 0 ? void 0 : field.id;\n  const fieldGroup = fieldPath ? form === null || form === void 0 ? void 0 : form.fieldsByPath.value[fieldPath] : undefined;\n  let idx;\n\n  if (encodeIndex && field && Array.isArray(fieldGroup)) {\n    idx = fieldGroup.indexOf(field);\n  }\n\n  const idObject = {\n    f: form === null || form === void 0 ? void 0 : form.formId,\n    ff: fieldPath,\n    idx,\n    type: field ? 'field' : 'form'\n  };\n  return btoa(JSON.stringify(idObject));\n}\n\nfunction decodeNodeId(nodeId) {\n  try {\n    const idObject = JSON.parse(atob(nodeId));\n    const form = DEVTOOLS_FORMS[idObject.f];\n\n    if (!form && idObject.ff) {\n      const field = DEVTOOLS_FIELDS[idObject.ff];\n\n      if (!field) {\n        return {};\n      }\n\n      return {\n        type: idObject.type,\n        field\n      };\n    }\n\n    if (!form) {\n      return {};\n    }\n\n    const fieldGroup = form.fieldsByPath.value[idObject.ff];\n    return {\n      type: idObject.type,\n      form,\n      field: Array.isArray(fieldGroup) ? fieldGroup[idObject.idx || 0] : fieldGroup\n    };\n  } catch (err) {// console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\n  }\n\n  return {};\n}\n\nfunction buildFieldState(field) {\n  const {\n    errors,\n    meta,\n    value\n  } = field;\n  return {\n    'Field state': [{\n      key: 'errors',\n      value: errors.value\n    }, {\n      key: 'initialValue',\n      value: meta.initialValue\n    }, {\n      key: 'currentValue',\n      value: value.value\n    }, {\n      key: 'touched',\n      value: meta.touched\n    }, {\n      key: 'dirty',\n      value: meta.dirty\n    }, {\n      key: 'valid',\n      value: meta.valid\n    }]\n  };\n}\n\nfunction buildFormState(form) {\n  const {\n    errorBag,\n    meta,\n    values,\n    isSubmitting,\n    submitCount\n  } = form;\n  return {\n    'Form state': [{\n      key: 'submitCount',\n      value: submitCount.value\n    }, {\n      key: 'isSubmitting',\n      value: isSubmitting.value\n    }, {\n      key: 'touched',\n      value: meta.value.touched\n    }, {\n      key: 'dirty',\n      value: meta.value.dirty\n    }, {\n      key: 'valid',\n      value: meta.value.valid\n    }, {\n      key: 'initialValues',\n      value: meta.value.initialValues\n    }, {\n      key: 'currentValues',\n      value: values\n    }, {\n      key: 'errors',\n      value: keysOf(errorBag.value).reduce((acc, key) => {\n        var _a;\n\n        const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\n\n        if (message) {\n          acc[key] = message;\n        }\n\n        return acc;\n      }, {})\n    }]\n  };\n}\n/**\r\n * Resolves the tag color based on the form state\r\n */\n\n\nfunction getTagTheme(fieldOrForm) {\n  // const fallbackColors = {\n  //   bgColor: COLORS.unknown,\n  //   textColor: COLORS.white,\n  // };\n  const isValid = 'id' in fieldOrForm ? fieldOrForm.meta.valid : fieldOrForm.meta.value.valid;\n  return {\n    bgColor: isValid ? COLORS.success : COLORS.error,\n    textColor: isValid ? COLORS.black : COLORS.white\n  };\n}\n/**\r\n * Creates a field composite.\r\n */\n\n\nfunction useField(name, rules, opts) {\n  if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\n    return useCheckboxField(name, rules, opts);\n  }\n\n  return _useField(name, rules, opts);\n}\n\nfunction _useField(name, rules, opts) {\n  const {\n    initialValue: modelValue,\n    validateOnMount,\n    bails,\n    type,\n    checkedValue,\n    label,\n    validateOnValueUpdate,\n    uncheckedValue,\n    standalone,\n    keepValueOnUnmount,\n    modelPropName,\n    syncVModel\n  } = normalizeOptions(unref(name), opts);\n  const form = !standalone ? injectWithSelf(FormContextKey) : undefined; // a flag indicating if the field is about to be removed/unmounted.\n\n  let markedForRemoval = false;\n  const {\n    id,\n    value,\n    initialValue,\n    meta,\n    setState,\n    errors,\n    errorMessage\n  } = useFieldState(name, {\n    modelValue,\n    standalone\n  });\n\n  if (syncVModel) {\n    useVModel({\n      value,\n      prop: modelPropName,\n      handleChange\n    });\n  }\n  /**\r\n   * Handles common onBlur meta update\r\n   */\n\n\n  const handleBlur = () => {\n    meta.touched = true;\n  };\n\n  const normalizedRules = computed(() => {\n    let rulesValue = unref(rules);\n    const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\n\n    if (schema && !isYupValidator(schema)) {\n      rulesValue = extractRuleFromSchema(schema, unref(name)) || rulesValue;\n    }\n\n    if (isYupValidator(rulesValue) || isCallable(rulesValue) || Array.isArray(rulesValue)) {\n      return rulesValue;\n    }\n\n    return normalizeRules(rulesValue);\n  });\n\n  async function validateCurrentValue(mode) {\n    var _a, _b;\n\n    if (form === null || form === void 0 ? void 0 : form.validateSchema) {\n      return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : {\n        valid: true,\n        errors: []\n      };\n    }\n\n    return validate(value.value, normalizedRules.value, {\n      name: unref(label) || unref(name),\n      values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\n      bails\n    });\n  }\n\n  async function validateWithStateMutation() {\n    meta.pending = true;\n    meta.validated = true;\n    const result = await validateCurrentValue('validated-only');\n\n    if (markedForRemoval) {\n      result.valid = true;\n      result.errors = [];\n    }\n\n    setState({\n      errors: result.errors\n    });\n    meta.pending = false;\n    return result;\n  }\n\n  async function validateValidStateOnly() {\n    const result = await validateCurrentValue('silent');\n\n    if (markedForRemoval) {\n      result.valid = true;\n    }\n\n    meta.valid = result.valid;\n    return result;\n  }\n\n  function validate$1(opts) {\n    if (!(opts === null || opts === void 0 ? void 0 : opts.mode) || (opts === null || opts === void 0 ? void 0 : opts.mode) === 'force') {\n      return validateWithStateMutation();\n    }\n\n    if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'validated-only') {\n      return validateWithStateMutation();\n    }\n\n    return validateValidStateOnly();\n  } // Common input/change event handler\n\n\n  function handleChange(e, shouldValidate = true) {\n    const newValue = normalizeEventValue(e);\n    value.value = newValue;\n\n    if (!validateOnValueUpdate && shouldValidate) {\n      validateWithStateMutation();\n    }\n  } // Runs the initial validation\n\n\n  onMounted(() => {\n    if (validateOnMount) {\n      return validateWithStateMutation();\n    } // validate self initially if no form was handling this\n    // forms should have their own initial silent validation run to make things more efficient\n\n\n    if (!form || !form.validateSchema) {\n      validateValidStateOnly();\n    }\n  });\n\n  function setTouched(isTouched) {\n    meta.touched = isTouched;\n  }\n\n  let unwatchValue;\n\n  function watchValue() {\n    unwatchValue = watch(value, (val, oldVal) => {\n      if (es6(val, oldVal)) {\n        return;\n      }\n\n      const validateFn = validateOnValueUpdate ? validateWithStateMutation : validateValidStateOnly;\n      validateFn();\n    }, {\n      deep: true\n    });\n  }\n\n  watchValue();\n\n  function resetField(state) {\n    var _a;\n\n    unwatchValue === null || unwatchValue === void 0 ? void 0 : unwatchValue();\n    const newValue = state && 'value' in state ? state.value : initialValue.value;\n    setState({\n      value: klona(newValue),\n      initialValue: klona(newValue),\n      touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\n      errors: (state === null || state === void 0 ? void 0 : state.errors) || []\n    });\n    meta.pending = false;\n    meta.validated = false;\n    validateValidStateOnly(); // need to watch at next tick to avoid triggering the value watcher\n\n    nextTick(() => {\n      watchValue();\n    });\n  }\n\n  function setValue(newValue) {\n    value.value = newValue;\n  }\n\n  function setErrors(errors) {\n    setState({\n      errors: Array.isArray(errors) ? errors : [errors]\n    });\n  }\n\n  const field = {\n    id,\n    name,\n    label,\n    value,\n    meta,\n    errors,\n    errorMessage,\n    type,\n    checkedValue,\n    uncheckedValue,\n    bails,\n    keepValueOnUnmount,\n    resetField,\n    handleReset: () => resetField(),\n    validate: validate$1,\n    handleChange,\n    handleBlur,\n    setState,\n    setTouched,\n    setErrors,\n    setValue\n  };\n  provide(FieldContextKey, field);\n\n  if (isRef(rules) && typeof unref(rules) !== 'function') {\n    watch(rules, (value, oldValue) => {\n      if (es6(value, oldValue)) {\n        return;\n      }\n\n      meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n    }, {\n      deep: true\n    });\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    field._vm = getCurrentInstance();\n    watch(() => Object.assign(Object.assign({\n      errors: errors.value\n    }, meta), {\n      value: value.value\n    }), refreshInspector, {\n      deep: true\n    });\n\n    if (!form) {\n      registerSingleFieldWithDevtools(field);\n    }\n  } // if no associated form return the field API immediately\n\n\n  if (!form) {\n    return field;\n  } // associate the field with the given form\n\n\n  form.register(field);\n  onBeforeUnmount(() => {\n    markedForRemoval = true;\n    form.unregister(field);\n  }); // extract cross-field dependencies in a computed prop\n\n  const dependencies = computed(() => {\n    const rulesVal = normalizedRules.value; // is falsy, a function schema or a yup schema\n\n    if (!rulesVal || isCallable(rulesVal) || isYupValidator(rulesVal) || Array.isArray(rulesVal)) {\n      return {};\n    }\n\n    return Object.keys(rulesVal).reduce((acc, rule) => {\n      const deps = extractLocators(rulesVal[rule]).map(dep => dep.__locatorRef).reduce((depAcc, depName) => {\n        const depValue = getFromPath(form.values, depName) || form.values[depName];\n\n        if (depValue !== undefined) {\n          depAcc[depName] = depValue;\n        }\n\n        return depAcc;\n      }, {});\n      Object.assign(acc, deps);\n      return acc;\n    }, {});\n  }); // Adds a watcher that runs the validation whenever field dependencies change\n\n  watch(dependencies, (deps, oldDeps) => {\n    // Skip if no dependencies or if the field wasn't manipulated\n    if (!Object.keys(deps).length) {\n      return;\n    }\n\n    const shouldValidate = !es6(deps, oldDeps);\n\n    if (shouldValidate) {\n      meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n    }\n  });\n  return field;\n}\n/**\r\n * Normalizes partial field options to include the full options\r\n */\n\n\nfunction normalizeOptions(name, opts) {\n  const defaults = () => ({\n    initialValue: undefined,\n    validateOnMount: false,\n    bails: true,\n    rules: '',\n    label: name,\n    validateOnValueUpdate: true,\n    standalone: false,\n    keepValueOnUnmount: undefined,\n    modelPropName: 'modelValue',\n    syncVModel: true\n  });\n\n  if (!opts) {\n    return defaults();\n  } // TODO: Deprecate this in next major release\n\n\n  const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\n  return Object.assign(Object.assign(Object.assign({}, defaults()), opts || {}), {\n    checkedValue\n  });\n}\n/**\r\n * Extracts the validation rules from a schema\r\n */\n\n\nfunction extractRuleFromSchema(schema, fieldName) {\n  // no schema at all\n  if (!schema) {\n    return undefined;\n  } // there is a key on the schema object for this field\n\n\n  return schema[fieldName];\n}\n\nfunction useCheckboxField(name, rules, opts) {\n  const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\n  const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\n  const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\n\n  function patchCheckboxApi(field) {\n    const handleChange = field.handleChange;\n    const checked = computed(() => {\n      const currentValue = unref(field.value);\n      const checkedVal = unref(checkedValue);\n      return Array.isArray(currentValue) ? currentValue.includes(checkedVal) : checkedVal === currentValue;\n    });\n\n    function handleCheckboxChange(e, shouldValidate = true) {\n      var _a;\n\n      if (checked.value === ((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.checked)) {\n        return;\n      }\n\n      let newValue = normalizeEventValue(e); // Single checkbox field without a form to toggle it's value\n\n      if (!form) {\n        newValue = resolveNextCheckboxValue(unref(field.value), unref(checkedValue), unref(uncheckedValue));\n      }\n\n      handleChange(newValue, shouldValidate);\n    }\n\n    onBeforeUnmount(() => {\n      var _a, _b;\n\n      const shouldKeepValue = (_b = (_a = unref(field.keepValueOnUnmount)) !== null && _a !== void 0 ? _a : unref(form === null || form === void 0 ? void 0 : form.keepValuesOnUnmount)) !== null && _b !== void 0 ? _b : false; // toggles the checkbox value if it was checked and the unset behavior is set\n\n      if (checked.value && !shouldKeepValue) {\n        handleCheckboxChange(unref(checkedValue), false);\n      }\n    });\n    return Object.assign(Object.assign({}, field), {\n      checked,\n      checkedValue,\n      uncheckedValue,\n      handleChange: handleCheckboxChange\n    });\n  }\n\n  return patchCheckboxApi(_useField(name, rules, opts));\n}\n\nfunction useVModel({\n  prop,\n  value,\n  handleChange\n}) {\n  const vm = getCurrentInstance();\n  /* istanbul ignore next */\n\n  if (!vm) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn('Failed to setup model events because `useField` was not called in setup.');\n    }\n\n    return;\n  }\n\n  const propName = prop || 'modelValue';\n  const emitName = `update:${propName}`; // Component doesn't have a model prop setup (must be defined on the props)\n\n  if (!(propName in vm.props)) {\n    return;\n  }\n\n  watch(value, newValue => {\n    if (es6(newValue, getCurrentModelValue(vm, propName))) {\n      return;\n    }\n\n    vm.emit(emitName, newValue);\n  });\n  watch(() => getCurrentModelValue(vm, propName), propValue => {\n    if (propValue === IS_ABSENT && value.value === undefined) {\n      return;\n    }\n\n    const newValue = propValue === IS_ABSENT ? undefined : propValue;\n\n    if (es6(newValue, applyModelModifiers(value.value, vm.props.modelModifiers))) {\n      return;\n    }\n\n    handleChange(newValue);\n  });\n}\n\nfunction getCurrentModelValue(vm, propName) {\n  return vm.props[propName];\n}\n\nconst FieldImpl = defineComponent({\n  name: 'Field',\n  inheritAttrs: false,\n  props: {\n    as: {\n      type: [String, Object],\n      default: undefined\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    rules: {\n      type: [Object, String, Function],\n      default: undefined\n    },\n    validateOnMount: {\n      type: Boolean,\n      default: false\n    },\n    validateOnBlur: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnChange: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnInput: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnModelUpdate: {\n      type: Boolean,\n      default: undefined\n    },\n    bails: {\n      type: Boolean,\n      default: () => getConfig().bails\n    },\n    label: {\n      type: String,\n      default: undefined\n    },\n    uncheckedValue: {\n      type: null,\n      default: undefined\n    },\n    modelValue: {\n      type: null,\n      default: IS_ABSENT\n    },\n    modelModifiers: {\n      type: null,\n      default: () => ({})\n    },\n    'onUpdate:modelValue': {\n      type: null,\n      default: undefined\n    },\n    standalone: {\n      type: Boolean,\n      default: false\n    },\n    keepValue: {\n      type: Boolean,\n      default: undefined\n    }\n  },\n\n  setup(props, ctx) {\n    const rules = toRef(props, 'rules');\n    const name = toRef(props, 'name');\n    const label = toRef(props, 'label');\n    const uncheckedValue = toRef(props, 'uncheckedValue');\n    const keepValue = toRef(props, 'keepValue');\n    const {\n      errors,\n      value,\n      errorMessage,\n      validate: validateField,\n      handleChange,\n      handleBlur,\n      setTouched,\n      resetField,\n      handleReset,\n      meta,\n      checked,\n      setErrors\n    } = useField(name, rules, {\n      validateOnMount: props.validateOnMount,\n      bails: props.bails,\n      standalone: props.standalone,\n      type: ctx.attrs.type,\n      initialValue: resolveInitialValue(props, ctx),\n      // Only for checkboxes and radio buttons\n      checkedValue: ctx.attrs.value,\n      uncheckedValue,\n      label,\n      validateOnValueUpdate: false,\n      keepValueOnUnmount: keepValue\n    }); // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\n\n    const onChangeHandler = function handleChangeWithModel(e, shouldValidate = true) {\n      handleChange(e, shouldValidate);\n      ctx.emit('update:modelValue', value.value);\n    };\n\n    const handleInput = e => {\n      if (!hasCheckedAttr(ctx.attrs.type)) {\n        value.value = normalizeEventValue(e);\n      }\n    };\n\n    const onInputHandler = function handleInputWithModel(e) {\n      handleInput(e);\n      ctx.emit('update:modelValue', value.value);\n    };\n\n    const fieldProps = computed(() => {\n      const {\n        validateOnInput,\n        validateOnChange,\n        validateOnBlur,\n        validateOnModelUpdate\n      } = resolveValidationTriggers(props);\n      const baseOnBlur = [handleBlur, ctx.attrs.onBlur, validateOnBlur ? validateField : undefined].filter(Boolean);\n      const baseOnInput = [e => onChangeHandler(e, validateOnInput), ctx.attrs.onInput].filter(Boolean);\n      const baseOnChange = [e => onChangeHandler(e, validateOnChange), ctx.attrs.onChange].filter(Boolean);\n      const attrs = {\n        name: props.name,\n        onBlur: baseOnBlur,\n        onInput: baseOnInput,\n        onChange: baseOnChange\n      };\n\n      attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\n\n      if (hasCheckedAttr(ctx.attrs.type) && checked) {\n        attrs.checked = checked.value;\n      }\n\n      const tag = resolveTag(props, ctx);\n\n      if (shouldHaveValueBinding(tag, ctx.attrs)) {\n        attrs.value = value.value;\n      }\n\n      return attrs;\n    });\n\n    function slotProps() {\n      return {\n        field: fieldProps.value,\n        value: value.value,\n        meta,\n        errors: errors.value,\n        errorMessage: errorMessage.value,\n        validate: validateField,\n        resetField,\n        handleChange: onChangeHandler,\n        handleInput: onInputHandler,\n        handleReset,\n        handleBlur,\n        setTouched,\n        setErrors\n      };\n    }\n\n    ctx.expose({\n      setErrors,\n      setTouched,\n      reset: resetField,\n      validate: validateField,\n      handleChange\n    });\n    return () => {\n      const tag = resolveDynamicComponent(resolveTag(props, ctx));\n      const children = normalizeChildren(tag, ctx, slotProps);\n\n      if (tag) {\n        return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\n      }\n\n      return children;\n    };\n  }\n\n});\n\nfunction resolveTag(props, ctx) {\n  let tag = props.as || '';\n\n  if (!props.as && !ctx.slots.default) {\n    tag = 'input';\n  }\n\n  return tag;\n}\n\nfunction resolveValidationTriggers(props) {\n  var _a, _b, _c, _d;\n\n  const {\n    validateOnInput,\n    validateOnChange,\n    validateOnBlur,\n    validateOnModelUpdate\n  } = getConfig();\n  return {\n    validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\n    validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\n    validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\n    validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate\n  };\n}\n\nfunction resolveInitialValue(props, ctx) {\n  // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\n  // For checkboxes and radio buttons it will always be the model value not the `value` attribute\n  if (!hasCheckedAttr(ctx.attrs.type)) {\n    return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\n  }\n\n  return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\n}\n\nconst Field = FieldImpl;\nlet FORM_COUNTER = 0;\n\nfunction useForm(opts) {\n  var _a;\n\n  const formId = FORM_COUNTER++; // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\n  // TODO: This won't be needed if we centralize all the state inside the `form` for form inputs\n\n  let RESET_LOCK = false; // A lookup containing fields or field groups\n\n  const fieldsByPath = ref({}); // If the form is currently submitting\n\n  const isSubmitting = ref(false); // The number of times the user tried to submit the form\n\n  const submitCount = ref(0); // field arrays managed by this form\n\n  const fieldArrays = []; // a private ref for all form values\n\n  const formValues = reactive(klona(unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {})); // the source of errors for the form fields\n\n  const {\n    errorBag,\n    setErrorBag,\n    setFieldErrorBag\n  } = useErrorBag(opts === null || opts === void 0 ? void 0 : opts.initialErrors); // Gets the first error of each field\n\n  const errors = computed(() => {\n    return keysOf(errorBag.value).reduce((acc, key) => {\n      const bag = errorBag.value[key];\n\n      if (bag && bag.length) {\n        acc[key] = bag[0];\n      }\n\n      return acc;\n    }, {});\n  });\n\n  function getFirstFieldAtPath(path) {\n    const fieldOrGroup = fieldsByPath.value[path];\n    return Array.isArray(fieldOrGroup) ? fieldOrGroup[0] : fieldOrGroup;\n  }\n\n  function fieldExists(path) {\n    return !!fieldsByPath.value[path];\n  }\n  /**\r\n   * Holds a computed reference to all fields names and labels\r\n   */\n\n\n  const fieldNames = computed(() => {\n    return keysOf(fieldsByPath.value).reduce((names, path) => {\n      const field = getFirstFieldAtPath(path);\n\n      if (field) {\n        names[path] = unref(field.label || field.name) || '';\n      }\n\n      return names;\n    }, {});\n  });\n  const fieldBailsMap = computed(() => {\n    return keysOf(fieldsByPath.value).reduce((map, path) => {\n      var _a;\n\n      const field = getFirstFieldAtPath(path);\n\n      if (field) {\n        map[path] = (_a = field.bails) !== null && _a !== void 0 ? _a : true;\n      }\n\n      return map;\n    }, {});\n  }); // mutable non-reactive reference to initial errors\n  // we need this to process initial errors then unset them\n\n  const initialErrors = Object.assign({}, (opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {});\n  const keepValuesOnUnmount = (_a = opts === null || opts === void 0 ? void 0 : opts.keepValuesOnUnmount) !== null && _a !== void 0 ? _a : false; // initial form values\n\n  const {\n    initialValues,\n    originalInitialValues,\n    setInitialValues\n  } = useFormInitialValues(fieldsByPath, formValues, opts === null || opts === void 0 ? void 0 : opts.initialValues); // form meta aggregations\n\n  const meta = useFormMeta(fieldsByPath, formValues, originalInitialValues, errors);\n  const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\n  const formCtx = {\n    formId,\n    fieldsByPath,\n    values: formValues,\n    errorBag,\n    errors,\n    schema,\n    submitCount,\n    meta,\n    isSubmitting,\n    fieldArrays,\n    keepValuesOnUnmount,\n    validateSchema: unref(schema) ? validateSchema : undefined,\n    validate,\n    register: registerField,\n    unregister: unregisterField,\n    setFieldErrorBag,\n    validateField,\n    setFieldValue,\n    setValues,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setTouched,\n    resetForm,\n    handleSubmit,\n    stageInitialValue,\n    unsetInitialValue,\n    setFieldInitialValue,\n    useFieldModel\n  };\n\n  function isFieldGroup(fieldOrGroup) {\n    return Array.isArray(fieldOrGroup);\n  }\n\n  function applyFieldMutation(fieldOrGroup, mutation) {\n    if (Array.isArray(fieldOrGroup)) {\n      return fieldOrGroup.forEach(mutation);\n    }\n\n    return mutation(fieldOrGroup);\n  }\n\n  function mutateAllFields(mutation) {\n    Object.values(fieldsByPath.value).forEach(field => {\n      if (!field) {\n        return;\n      } // avoid resetting the field values, because they should've been reset already.\n\n\n      applyFieldMutation(field, mutation);\n    });\n  }\n  /**\r\n   * Manually sets an error message on a specific field\r\n   */\n\n\n  function setFieldError(field, message) {\n    setFieldErrorBag(field, message);\n  }\n  /**\r\n   * Sets errors for the fields specified in the object\r\n   */\n\n\n  function setErrors(fields) {\n    setErrorBag(fields);\n  }\n  /**\r\n   * Sets a single field value\r\n   */\n\n\n  function setFieldValue(field, value, {\n    force\n  } = {\n    force: false\n  }) {\n    var _a;\n\n    const fieldInstance = fieldsByPath.value[field];\n    const clonedValue = klona(value); // field wasn't found, create a virtual field as a placeholder\n\n    if (!fieldInstance) {\n      setInPath(formValues, field, clonedValue);\n      return;\n    }\n\n    if (isFieldGroup(fieldInstance) && ((_a = fieldInstance[0]) === null || _a === void 0 ? void 0 : _a.type) === 'checkbox' && !Array.isArray(value)) {\n      // Multiple checkboxes, and only one of them got updated\n      const newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field) || [], value, undefined));\n      setInPath(formValues, field, newValue);\n      return;\n    }\n\n    let newValue = value; // Single Checkbox: toggles the field value unless the field is being reset then force it\n\n    if (!isFieldGroup(fieldInstance) && fieldInstance.type === 'checkbox' && !force && !RESET_LOCK) {\n      newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field), value, unref(fieldInstance.uncheckedValue)));\n    }\n\n    setInPath(formValues, field, newValue);\n  }\n  /**\r\n   * Sets multiple fields values\r\n   */\n\n\n  function setValues(fields) {\n    // clean up old values\n    keysOf(formValues).forEach(key => {\n      delete formValues[key];\n    }); // set up new values\n\n    keysOf(fields).forEach(path => {\n      setFieldValue(path, fields[path]);\n    }); // regenerate the arrays when the form values change\n\n    fieldArrays.forEach(f => f && f.reset());\n  }\n\n  function createModel(path) {\n    const {\n      value\n    } = _useFieldValue(path);\n\n    watch(value, () => {\n      if (!fieldExists(unref(path))) {\n        validate({\n          mode: 'validated-only'\n        });\n      }\n    });\n    return value;\n  }\n\n  function useFieldModel(path) {\n    if (!Array.isArray(path)) {\n      return createModel(path);\n    }\n\n    return path.map(createModel);\n  }\n  /**\r\n   * Sets the touched meta state on a field\r\n   */\n\n\n  function setFieldTouched(field, isTouched) {\n    const fieldInstance = fieldsByPath.value[field];\n\n    if (fieldInstance) {\n      applyFieldMutation(fieldInstance, f => f.setTouched(isTouched));\n    }\n  }\n  /**\r\n   * Sets the touched meta state on multiple fields\r\n   */\n\n\n  function setTouched(fields) {\n    keysOf(fields).forEach(field => {\n      setFieldTouched(field, !!fields[field]);\n    });\n  }\n  /**\r\n   * Resets all fields\r\n   */\n\n\n  function resetForm(state) {\n    RESET_LOCK = true; // set initial values if provided\n\n    if (state === null || state === void 0 ? void 0 : state.values) {\n      setInitialValues(state.values);\n      setValues(state === null || state === void 0 ? void 0 : state.values);\n    } else {\n      // clean up the initial values back to the original\n      setInitialValues(originalInitialValues.value); // otherwise clean the current values\n\n      setValues(originalInitialValues.value);\n    } // avoid resetting the field values, because they should've been reset already.\n\n\n    mutateAllFields(f => f.resetField());\n\n    if (state === null || state === void 0 ? void 0 : state.touched) {\n      setTouched(state.touched);\n    }\n\n    setErrors((state === null || state === void 0 ? void 0 : state.errors) || {});\n    submitCount.value = (state === null || state === void 0 ? void 0 : state.submitCount) || 0;\n    nextTick(() => {\n      RESET_LOCK = false;\n    });\n  }\n\n  function insertFieldAtPath(field, path) {\n    const rawField = markRaw(field);\n    const fieldPath = path; // first field at that path\n\n    if (!fieldsByPath.value[fieldPath]) {\n      fieldsByPath.value[fieldPath] = rawField;\n      return;\n    }\n\n    const fieldAtPath = fieldsByPath.value[fieldPath];\n\n    if (fieldAtPath && !Array.isArray(fieldAtPath)) {\n      fieldsByPath.value[fieldPath] = [fieldAtPath];\n    } // add the new array to that path\n\n\n    fieldsByPath.value[fieldPath] = [...fieldsByPath.value[fieldPath], rawField];\n  }\n\n  function removeFieldFromPath(field, path) {\n    const fieldPath = path;\n    const fieldAtPath = fieldsByPath.value[fieldPath];\n\n    if (!fieldAtPath) {\n      return;\n    } // same field at path\n\n\n    if (!isFieldGroup(fieldAtPath) && field.id === fieldAtPath.id) {\n      delete fieldsByPath.value[fieldPath];\n      return;\n    }\n\n    if (isFieldGroup(fieldAtPath)) {\n      const idx = fieldAtPath.findIndex(f => f.id === field.id);\n\n      if (idx === -1) {\n        return;\n      }\n\n      fieldAtPath.splice(idx, 1);\n\n      if (fieldAtPath.length === 1) {\n        fieldsByPath.value[fieldPath] = fieldAtPath[0];\n        return;\n      }\n\n      if (!fieldAtPath.length) {\n        delete fieldsByPath.value[fieldPath];\n      }\n    }\n  }\n\n  function registerField(field) {\n    const fieldPath = unref(field.name);\n    insertFieldAtPath(field, fieldPath);\n\n    if (isRef(field.name)) {\n      // ensures when a field's name was already taken that it preserves its same value\n      // necessary for fields generated by loops\n      watch(field.name, async (newPath, oldPath) => {\n        // cache the value\n        await nextTick();\n        removeFieldFromPath(field, oldPath);\n        insertFieldAtPath(field, newPath); // re-validate if either path had errors before\n\n        if (errors.value[oldPath] || errors.value[newPath]) {\n          // clear up both paths errors\n          setFieldError(oldPath, undefined);\n          validateField(newPath);\n        } // clean up the old path if no other field is sharing that name\n        // #3325\n\n\n        await nextTick();\n\n        if (!fieldExists(oldPath)) {\n          unsetPath(formValues, oldPath);\n        }\n      });\n    } // if field already had errors (initial errors) that's not user-set, validate it again to ensure state is correct\n    // the difference being that `initialErrors` will contain the error message while other errors (pre-validated schema) won't have them as initial errors\n    // #3342\n\n\n    const initialErrorMessage = unref(field.errorMessage);\n\n    if (initialErrorMessage && (initialErrors === null || initialErrors === void 0 ? void 0 : initialErrors[fieldPath]) !== initialErrorMessage) {\n      validateField(fieldPath);\n    } // marks the initial error as \"consumed\" so it won't be matched later with same non-initial error\n\n\n    delete initialErrors[fieldPath];\n  }\n\n  function unregisterField(field) {\n    const fieldName = unref(field.name);\n    const fieldInstance = fieldsByPath.value[fieldName];\n    const isGroup = !!fieldInstance && isFieldGroup(fieldInstance);\n    removeFieldFromPath(field, fieldName);\n    nextTick(() => {\n      var _a; // clears a field error on unmounted\n      // we wait till next tick to make sure if the field is completely removed and doesn't have any siblings like checkboxes\n      // #3384\n\n\n      if (!fieldExists(fieldName)) {\n        setFieldError(fieldName, undefined); // Checks if the field was configured to be unset during unmount or not\n        // Checks both the form-level config and field-level one\n        // Field has the priority if it is set, otherwise it goes to the form settings\n\n        const shouldKeepValue = (_a = unref(field.keepValueOnUnmount)) !== null && _a !== void 0 ? _a : unref(keepValuesOnUnmount);\n\n        if (shouldKeepValue) {\n          return;\n        }\n\n        if (isGroup && !isEmptyContainer(getFromPath(formValues, fieldName))) {\n          return;\n        }\n\n        unsetPath(formValues, fieldName);\n      }\n    });\n  }\n\n  async function validate(opts) {\n    mutateAllFields(f => f.meta.validated = true);\n\n    if (formCtx.validateSchema) {\n      return formCtx.validateSchema((opts === null || opts === void 0 ? void 0 : opts.mode) || 'force');\n    } // No schema, each field is responsible to validate itself\n\n\n    const validations = await Promise.all(Object.values(fieldsByPath.value).map(field => {\n      const fieldInstance = Array.isArray(field) ? field[0] : field;\n\n      if (!fieldInstance) {\n        return Promise.resolve({\n          key: '',\n          valid: true,\n          errors: []\n        });\n      }\n\n      return fieldInstance.validate(opts).then(result => {\n        return {\n          key: unref(fieldInstance.name),\n          valid: result.valid,\n          errors: result.errors\n        };\n      });\n    }));\n    const results = {};\n    const errors = {};\n\n    for (const validation of validations) {\n      results[validation.key] = {\n        valid: validation.valid,\n        errors: validation.errors\n      };\n\n      if (validation.errors.length) {\n        errors[validation.key] = validation.errors[0];\n      }\n    }\n\n    return {\n      valid: validations.every(r => r.valid),\n      results,\n      errors\n    };\n  }\n\n  async function validateField(field) {\n    const fieldInstance = fieldsByPath.value[field];\n\n    if (!fieldInstance) {\n      warn$1(`field with name ${field} was not found`);\n      return Promise.resolve({\n        errors: [],\n        valid: true\n      });\n    }\n\n    if (Array.isArray(fieldInstance)) {\n      return fieldInstance.map(f => f.validate())[0];\n    }\n\n    return fieldInstance.validate();\n  }\n\n  function handleSubmit(fn, onValidationError) {\n    return function submissionHandler(e) {\n      if (e instanceof Event) {\n        e.preventDefault();\n        e.stopPropagation();\n      } // Touch all fields\n\n\n      setTouched(keysOf(fieldsByPath.value).reduce((acc, field) => {\n        acc[field] = true;\n        return acc;\n      }, {}));\n      isSubmitting.value = true;\n      submitCount.value++;\n      return validate().then(result => {\n        if (result.valid && typeof fn === 'function') {\n          return fn(klona(formValues), {\n            evt: e,\n            setErrors,\n            setFieldError,\n            setTouched,\n            setFieldTouched,\n            setValues,\n            setFieldValue,\n            resetForm\n          });\n        }\n\n        if (!result.valid && typeof onValidationError === 'function') {\n          onValidationError({\n            values: klona(formValues),\n            evt: e,\n            errors: result.errors,\n            results: result.results\n          });\n        }\n      }).then(returnVal => {\n        isSubmitting.value = false;\n        return returnVal;\n      }, err => {\n        isSubmitting.value = false; // re-throw the err so it doesn't go silent\n\n        throw err;\n      });\n    };\n  }\n\n  function setFieldInitialValue(path, value) {\n    setInPath(initialValues.value, path, klona(value));\n  }\n\n  function unsetInitialValue(path) {\n    unsetPath(initialValues.value, path);\n  }\n  /**\r\n   * Sneaky function to set initial field values\r\n   */\n\n\n  function stageInitialValue(path, value, updateOriginal = false) {\n    setInPath(formValues, path, value);\n    setFieldInitialValue(path, value);\n\n    if (updateOriginal) {\n      setInPath(originalInitialValues.value, path, klona(value));\n    }\n  }\n\n  async function _validateSchema() {\n    const schemaValue = unref(schema);\n\n    if (!schemaValue) {\n      return {\n        valid: true,\n        results: {},\n        errors: {}\n      };\n    }\n\n    const formResult = isYupValidator(schemaValue) ? await validateYupSchema(schemaValue, formValues) : await validateObjectSchema(schemaValue, formValues, {\n      names: fieldNames.value,\n      bailsMap: fieldBailsMap.value\n    });\n    return formResult;\n  }\n  /**\r\n   * Batches validation runs in 5ms batches\r\n   * Must have two distinct batch queues to make sure they don't override each other settings #3783\r\n   */\n\n\n  const debouncedSilentValidation = debounceAsync(_validateSchema, 5);\n  const debouncedValidation = debounceAsync(_validateSchema, 5);\n\n  async function validateSchema(mode) {\n    const formResult = await (mode === 'silent' ? debouncedSilentValidation() : debouncedValidation()); // fields by id lookup\n\n    const fieldsById = formCtx.fieldsByPath.value || {}; // errors fields names, we need it to also check if custom errors are updated\n\n    const currentErrorsPaths = keysOf(formCtx.errorBag.value); // collect all the keys from the schema and all fields\n    // this ensures we have a complete keymap of all the fields\n\n    const paths = [...new Set([...keysOf(formResult.results), ...keysOf(fieldsById), ...currentErrorsPaths])]; // aggregates the paths into a single result object while applying the results on the fields\n\n    return paths.reduce((validation, path) => {\n      const field = fieldsById[path];\n      const messages = (formResult.results[path] || {\n        errors: []\n      }).errors;\n      const fieldResult = {\n        errors: messages,\n        valid: !messages.length\n      };\n      validation.results[path] = fieldResult;\n\n      if (!fieldResult.valid) {\n        validation.errors[path] = fieldResult.errors[0];\n      } // field not rendered\n\n\n      if (!field) {\n        setFieldError(path, messages);\n        return validation;\n      } // always update the valid flag regardless of the mode\n\n\n      applyFieldMutation(field, f => f.meta.valid = fieldResult.valid);\n\n      if (mode === 'silent') {\n        return validation;\n      }\n\n      const wasValidated = Array.isArray(field) ? field.some(f => f.meta.validated) : field.meta.validated;\n\n      if (mode === 'validated-only' && !wasValidated) {\n        return validation;\n      }\n\n      applyFieldMutation(field, f => f.setState({\n        errors: fieldResult.errors\n      }));\n      return validation;\n    }, {\n      valid: formResult.valid,\n      results: {},\n      errors: {}\n    });\n  }\n\n  const submitForm = handleSubmit((_, {\n    evt\n  }) => {\n    if (isFormSubmitEvent(evt)) {\n      evt.target.submit();\n    }\n  }); // Trigger initial validation\n\n  onMounted(() => {\n    if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n      setErrors(opts.initialErrors);\n    }\n\n    if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\n      setTouched(opts.initialTouched);\n    } // if validate on mount was enabled\n\n\n    if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\n      validate();\n      return;\n    } // otherwise run initial silent validation through schema if available\n    // the useField should skip their own silent validation if a yup schema is present\n\n\n    if (formCtx.validateSchema) {\n      formCtx.validateSchema('silent');\n    }\n  });\n\n  if (isRef(schema)) {\n    watch(schema, () => {\n      var _a;\n\n      (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\n    });\n  } // Provide injections\n\n\n  provide(FormContextKey, formCtx);\n\n  if (process.env.NODE_ENV !== 'production') {\n    registerFormWithDevTools(formCtx);\n    watch(() => Object.assign(Object.assign({\n      errors: errorBag.value\n    }, meta.value), {\n      values: formValues,\n      isSubmitting: isSubmitting.value,\n      submitCount: submitCount.value\n    }), refreshInspector, {\n      deep: true\n    });\n  }\n\n  return {\n    errors,\n    meta,\n    values: formValues,\n    isSubmitting,\n    submitCount,\n    validate,\n    validateField,\n    handleReset: () => resetForm(),\n    resetForm,\n    handleSubmit,\n    submitForm,\n    setFieldError,\n    setErrors,\n    setFieldValue,\n    setValues,\n    setFieldTouched,\n    setTouched,\n    useFieldModel\n  };\n}\n/**\r\n * Manages form meta aggregation\r\n */\n\n\nfunction useFormMeta(fieldsByPath, currentValues, initialValues, errors) {\n  const MERGE_STRATEGIES = {\n    touched: 'some',\n    pending: 'some',\n    valid: 'every'\n  };\n  const isDirty = computed(() => {\n    return !es6(currentValues, unref(initialValues));\n  });\n\n  function calculateFlags() {\n    const fields = Object.values(fieldsByPath.value).flat(1).filter(Boolean);\n    return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\n      const mergeMethod = MERGE_STRATEGIES[flag];\n      acc[flag] = fields[mergeMethod](field => field.meta[flag]);\n      return acc;\n    }, {});\n  }\n\n  const flags = reactive(calculateFlags());\n  watchEffect(() => {\n    const value = calculateFlags();\n    flags.touched = value.touched;\n    flags.valid = value.valid;\n    flags.pending = value.pending;\n  });\n  return computed(() => {\n    return Object.assign(Object.assign({\n      initialValues: unref(initialValues)\n    }, flags), {\n      valid: flags.valid && !keysOf(errors.value).length,\n      dirty: isDirty.value\n    });\n  });\n}\n/**\r\n * Manages the initial values prop\r\n */\n\n\nfunction useFormInitialValues(fields, formValues, providedValues) {\n  // these are the mutable initial values as the fields are mounted/unmounted\n  const initialValues = ref(klona(unref(providedValues)) || {}); // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\n  // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\n  // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\n  // so these are the values that the reset function should use\n  // these only change when the user explicitly chanegs the initial values or when the user resets them with new values.\n\n  const originalInitialValues = ref(klona(unref(providedValues)) || {});\n\n  function setInitialValues(values, updateFields = false) {\n    initialValues.value = klona(values);\n    originalInitialValues.value = klona(values);\n\n    if (!updateFields) {\n      return;\n    } // update the pristine non-touched fields\n    // those are excluded because it's unlikely you want to change the form values using initial values\n    // we mostly watch them for API population or newly inserted fields\n    // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\n\n\n    keysOf(fields.value).forEach(fieldPath => {\n      const field = fields.value[fieldPath];\n      const wasTouched = Array.isArray(field) ? field.some(f => f.meta.touched) : field === null || field === void 0 ? void 0 : field.meta.touched;\n\n      if (!field || wasTouched) {\n        return;\n      }\n\n      const newValue = getFromPath(initialValues.value, fieldPath);\n      setInPath(formValues, fieldPath, klona(newValue));\n    });\n  }\n\n  if (isRef(providedValues)) {\n    watch(providedValues, value => {\n      setInitialValues(value, true);\n    }, {\n      deep: true\n    });\n  }\n\n  return {\n    initialValues,\n    originalInitialValues,\n    setInitialValues\n  };\n}\n\nfunction useErrorBag(initialErrors) {\n  const errorBag = ref({});\n\n  function normalizeErrorItem(message) {\n    return Array.isArray(message) ? message : message ? [message] : [];\n  }\n  /**\r\n   * Manually sets an error message on a specific field\r\n   */\n\n\n  function setFieldErrorBag(field, message) {\n    if (!message) {\n      delete errorBag.value[field];\n      return;\n    }\n\n    errorBag.value[field] = normalizeErrorItem(message);\n  }\n  /**\r\n   * Sets errors for the fields specified in the object\r\n   */\n\n\n  function setErrorBag(fields) {\n    errorBag.value = keysOf(fields).reduce((acc, key) => {\n      const message = fields[key];\n\n      if (message) {\n        acc[key] = normalizeErrorItem(message);\n      }\n\n      return acc;\n    }, {});\n  }\n\n  if (initialErrors) {\n    setErrorBag(initialErrors);\n  }\n\n  return {\n    errorBag,\n    setErrorBag,\n    setFieldErrorBag\n  };\n}\n\nconst FormImpl = defineComponent({\n  name: 'Form',\n  inheritAttrs: false,\n  props: {\n    as: {\n      type: String,\n      default: 'form'\n    },\n    validationSchema: {\n      type: Object,\n      default: undefined\n    },\n    initialValues: {\n      type: Object,\n      default: undefined\n    },\n    initialErrors: {\n      type: Object,\n      default: undefined\n    },\n    initialTouched: {\n      type: Object,\n      default: undefined\n    },\n    validateOnMount: {\n      type: Boolean,\n      default: false\n    },\n    onSubmit: {\n      type: Function,\n      default: undefined\n    },\n    onInvalidSubmit: {\n      type: Function,\n      default: undefined\n    },\n    keepValues: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  setup(props, ctx) {\n    const initialValues = toRef(props, 'initialValues');\n    const validationSchema = toRef(props, 'validationSchema');\n    const keepValues = toRef(props, 'keepValues');\n    const {\n      errors,\n      values,\n      meta,\n      isSubmitting,\n      submitCount,\n      validate,\n      validateField,\n      handleReset,\n      resetForm,\n      handleSubmit,\n      setErrors,\n      setFieldError,\n      setFieldValue,\n      setValues,\n      setFieldTouched,\n      setTouched\n    } = useForm({\n      validationSchema: validationSchema.value ? validationSchema : undefined,\n      initialValues,\n      initialErrors: props.initialErrors,\n      initialTouched: props.initialTouched,\n      validateOnMount: props.validateOnMount,\n      keepValuesOnUnmount: keepValues\n    });\n    const submitForm = handleSubmit((_, {\n      evt\n    }) => {\n      if (isFormSubmitEvent(evt)) {\n        evt.target.submit();\n      }\n    }, props.onInvalidSubmit);\n    const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\n\n    function handleFormReset(e) {\n      if (isEvent(e)) {\n        // Prevent default form reset behavior\n        e.preventDefault();\n      }\n\n      handleReset();\n\n      if (typeof ctx.attrs.onReset === 'function') {\n        ctx.attrs.onReset();\n      }\n    }\n\n    function handleScopedSlotSubmit(evt, onSubmit) {\n      const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\n      return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\n    }\n\n    function slotProps() {\n      return {\n        meta: meta.value,\n        errors: errors.value,\n        values: values,\n        isSubmitting: isSubmitting.value,\n        submitCount: submitCount.value,\n        validate,\n        validateField,\n        handleSubmit: handleScopedSlotSubmit,\n        handleReset,\n        submitForm,\n        setErrors,\n        setFieldError,\n        setFieldValue,\n        setValues,\n        setFieldTouched,\n        setTouched,\n        resetForm\n      };\n    } // expose these functions and methods as part of public API\n\n\n    ctx.expose({\n      setFieldError,\n      setErrors,\n      setFieldValue,\n      setValues,\n      setFieldTouched,\n      setTouched,\n      resetForm,\n      validate,\n      validateField\n    });\n    return function renderForm() {\n      // avoid resolving the form component as itself\n      const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\n      const children = normalizeChildren(tag, ctx, slotProps);\n\n      if (!props.as) {\n        return children;\n      } // Attributes to add on a native `form` tag\n\n\n      const formAttrs = props.as === 'form' ? {\n        // Disables native validation as vee-validate will handle it.\n        novalidate: true\n      } : {};\n      return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), {\n        onSubmit,\n        onReset: handleFormReset\n      }), children);\n    };\n  }\n\n});\nconst Form = FormImpl;\n\nfunction useFieldArray(arrayPath) {\n  const form = injectWithSelf(FormContextKey, undefined);\n  const fields = ref([]); // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n  const noOp = () => {};\n\n  const noOpApi = {\n    fields,\n    remove: noOp,\n    push: noOp,\n    swap: noOp,\n    insert: noOp,\n    update: noOp,\n    replace: noOp,\n    prepend: noOp,\n    move: noOp\n  };\n\n  if (!form) {\n    warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\n    return noOpApi;\n  }\n\n  if (!unref(arrayPath)) {\n    warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\n    return noOpApi;\n  }\n\n  const alreadyExists = form.fieldArrays.find(a => unref(a.path) === unref(arrayPath));\n\n  if (alreadyExists) {\n    return alreadyExists;\n  }\n\n  let entryCounter = 0;\n\n  function initFields() {\n    const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n    fields.value = currentValues.map(createEntry);\n    updateEntryFlags();\n  }\n\n  initFields();\n\n  function updateEntryFlags() {\n    const fieldsLength = fields.value.length;\n\n    for (let i = 0; i < fieldsLength; i++) {\n      const entry = fields.value[i];\n      entry.isFirst = i === 0;\n      entry.isLast = i === fieldsLength - 1;\n    }\n  }\n\n  function createEntry(value) {\n    const key = entryCounter++;\n    const entry = {\n      key,\n      value: computed({\n        get() {\n          const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n          const idx = fields.value.findIndex(e => e.key === key);\n          return idx === -1 ? value : currentValues[idx];\n        },\n\n        set(value) {\n          const idx = fields.value.findIndex(e => e.key === key);\n\n          if (idx === -1) {\n            warn(`Attempting to update a non-existent array item`);\n            return;\n          }\n\n          update(idx, value);\n        }\n\n      }),\n      isFirst: false,\n      isLast: false\n    };\n    return entry;\n  }\n\n  function remove(idx) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n\n    if (!pathValue || !Array.isArray(pathValue)) {\n      return;\n    }\n\n    const newValue = [...pathValue];\n    newValue.splice(idx, 1);\n    form === null || form === void 0 ? void 0 : form.unsetInitialValue(pathName + `[${idx}]`);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.splice(idx, 1);\n    updateEntryFlags();\n  }\n\n  function push(value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n\n    if (!Array.isArray(normalizedPathValue)) {\n      return;\n    }\n\n    const newValue = [...normalizedPathValue];\n    newValue.push(value);\n    form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.push(createEntry(value));\n    updateEntryFlags();\n  }\n\n  function swap(indexA, indexB) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n\n    if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\n      return;\n    }\n\n    const newValue = [...pathValue];\n    const newFields = [...fields.value]; // the old switcheroo\n\n    const temp = newValue[indexA];\n    newValue[indexA] = newValue[indexB];\n    newValue[indexB] = temp;\n    const tempEntry = newFields[indexA];\n    newFields[indexA] = newFields[indexB];\n    newFields[indexB] = tempEntry;\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value = newFields;\n    updateEntryFlags();\n  }\n\n  function insert(idx, value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n\n    if (!Array.isArray(pathValue) || pathValue.length < idx) {\n      return;\n    }\n\n    const newValue = [...pathValue];\n    const newFields = [...fields.value];\n    newValue.splice(idx, 0, value);\n    newFields.splice(idx, 0, createEntry(value));\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value = newFields;\n    updateEntryFlags();\n  }\n\n  function replace(arr) {\n    const pathName = unref(arrayPath);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, arr);\n    initFields();\n  }\n\n  function update(idx, value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n\n    if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\n      return;\n    }\n\n    form === null || form === void 0 ? void 0 : form.setFieldValue(`${pathName}[${idx}]`, value);\n  }\n\n  function prepend(value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n\n    if (!Array.isArray(normalizedPathValue)) {\n      return;\n    }\n\n    const newValue = [value, ...normalizedPathValue];\n    form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.unshift(createEntry(value));\n    updateEntryFlags();\n  }\n\n  function move(oldIdx, newIdx) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const newValue = isNullOrUndefined(pathValue) ? [] : [...pathValue];\n\n    if (!Array.isArray(pathValue) || !(oldIdx in pathValue) || !(newIdx in pathValue)) {\n      return;\n    }\n\n    const newFields = [...fields.value];\n    const movedItem = newFields[oldIdx];\n    newFields.splice(oldIdx, 1);\n    newFields.splice(newIdx, 0, movedItem);\n    const movedValue = newValue[oldIdx];\n    newValue.splice(oldIdx, 1);\n    newValue.splice(newIdx, 0, movedValue);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value = newFields;\n    updateEntryFlags();\n  }\n\n  const fieldArrayCtx = {\n    fields,\n    remove,\n    push,\n    swap,\n    insert,\n    update,\n    replace,\n    prepend,\n    move\n  };\n  form.fieldArrays.push(Object.assign({\n    path: arrayPath,\n    reset: initFields\n  }, fieldArrayCtx));\n  onBeforeUnmount(() => {\n    const idx = form.fieldArrays.findIndex(i => unref(i.path) === unref(arrayPath));\n\n    if (idx >= 0) {\n      form.fieldArrays.splice(idx, 1);\n    }\n  });\n  return fieldArrayCtx;\n}\n\nconst FieldArrayImpl = defineComponent({\n  name: 'FieldArray',\n  inheritAttrs: false,\n  props: {\n    name: {\n      type: String,\n      required: true\n    }\n  },\n\n  setup(props, ctx) {\n    const {\n      push,\n      remove,\n      swap,\n      insert,\n      replace,\n      update,\n      prepend,\n      move,\n      fields\n    } = useFieldArray(toRef(props, 'name'));\n\n    function slotProps() {\n      return {\n        fields: fields.value,\n        push,\n        remove,\n        swap,\n        insert,\n        update,\n        replace,\n        prepend,\n        move\n      };\n    }\n\n    ctx.expose({\n      push,\n      remove,\n      swap,\n      insert,\n      update,\n      replace,\n      prepend,\n      move\n    });\n    return () => {\n      const children = normalizeChildren(undefined, ctx, slotProps);\n      return children;\n    };\n  }\n\n});\nconst FieldArray = FieldArrayImpl;\nconst ErrorMessageImpl = defineComponent({\n  name: 'ErrorMessage',\n  props: {\n    as: {\n      type: String,\n      default: undefined\n    },\n    name: {\n      type: String,\n      required: true\n    }\n  },\n\n  setup(props, ctx) {\n    const form = inject(FormContextKey, undefined);\n    const message = computed(() => {\n      return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\n    });\n\n    function slotProps() {\n      return {\n        message: message.value\n      };\n    }\n\n    return () => {\n      // Renders nothing if there are no messages\n      if (!message.value) {\n        return undefined;\n      }\n\n      const tag = props.as ? resolveDynamicComponent(props.as) : props.as;\n      const children = normalizeChildren(tag, ctx, slotProps);\n      const attrs = Object.assign({\n        role: 'alert'\n      }, ctx.attrs); // If no tag was specified and there are children\n      // render the slot as is without wrapping it\n\n      if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\n        return children;\n      } // If no children in slot\n      // render whatever specified and fallback to a <span> with the message in it's contents\n\n\n      if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\n        return h(tag || 'span', attrs, message.value);\n      }\n\n      return h(tag, attrs, children);\n    };\n  }\n\n});\nconst ErrorMessage = ErrorMessageImpl;\n\nfunction useResetForm() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return function resetForm(state) {\n    if (!form) {\n      return;\n    }\n\n    return form.resetForm(state);\n  };\n}\n/**\r\n * If a field is dirty or not\r\n */\n\n\nfunction useIsFieldDirty(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n\n    return field.meta.dirty;\n  });\n}\n/**\r\n * If a field is touched or not\r\n */\n\n\nfunction useIsFieldTouched(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n\n    return field.meta.touched;\n  });\n}\n/**\r\n * If a field is validated and is valid\r\n */\n\n\nfunction useIsFieldValid(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n\n    return field.meta.valid;\n  });\n}\n/**\r\n * If the form is submitting or not\r\n */\n\n\nfunction useIsSubmitting() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\n  });\n}\n/**\r\n * Validates a single field\r\n */\n\n\nfunction useValidateField(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return function validateField() {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return Promise.resolve({\n        errors: [],\n        valid: true\n      });\n    }\n\n    return field.validate();\n  };\n}\n/**\r\n * If the form is dirty or not\r\n */\n\n\nfunction useIsFormDirty() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\n  });\n}\n/**\r\n * If the form is touched or not\r\n */\n\n\nfunction useIsFormTouched() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\n  });\n}\n/**\r\n * If the form has been validated and is valid\r\n */\n\n\nfunction useIsFormValid() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\n  });\n}\n/**\r\n * Validate multiple fields\r\n */\n\n\nfunction useValidateForm() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return function validateField() {\n    if (!form) {\n      return Promise.resolve({\n        results: {},\n        errors: {},\n        valid: true\n      });\n    }\n\n    return form.validate();\n  };\n}\n/**\r\n * The number of form's submission count\r\n */\n\n\nfunction useSubmitCount() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\n  });\n}\n/**\r\n * Gives access to a field's current value\r\n */\n\n\nfunction useFieldValue(path) {\n  const form = injectWithSelf(FormContextKey); // We don't want to use self injected context as it doesn't make sense\n\n  const field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\n    }\n\n    return unref(field === null || field === void 0 ? void 0 : field.value);\n  });\n}\n/**\r\n * Gives access to a form's values\r\n */\n\n\nfunction useFormValues() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    return (form === null || form === void 0 ? void 0 : form.values) || {};\n  });\n}\n/**\r\n * Gives access to all form errors\r\n */\n\n\nfunction useFormErrors() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    return (form === null || form === void 0 ? void 0 : form.errors.value) || {};\n  });\n}\n/**\r\n * Gives access to a single field error\r\n */\n\n\nfunction useFieldError(path) {\n  const form = injectWithSelf(FormContextKey); // We don't want to use self injected context as it doesn't make sense\n\n  const field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\n    }\n\n    return field === null || field === void 0 ? void 0 : field.errorMessage.value;\n  });\n}\n\nfunction useSubmitForm(cb) {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  const onSubmit = form ? form.handleSubmit(cb) : undefined;\n  return function submitForm(e) {\n    if (!onSubmit) {\n      return;\n    }\n\n    return onSubmit(e);\n  };\n}\n\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, IS_ABSENT, configure, defineRule, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useResetForm, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate };","map":{"version":3,"names":["inject","getCurrentInstance","warn","warn$1","ref","unref","computed","reactive","watch","onUnmounted","nextTick","onMounted","provide","isRef","onBeforeUnmount","defineComponent","toRef","resolveDynamicComponent","h","watchEffect","markRaw","setupDevtoolsPlugin","isCallable","fn","isNullOrUndefined","value","undefined","isObject","obj","Array","isArray","isIndex","Number","toNumber","n","parseFloat","isNaN","RULES","defineRule","id","validator","guardExtend","resolveRule","Error","FormContextKey","Symbol","FieldContextKey","IS_ABSENT","isLocator","__locatorRef","isYupValidator","validate","hasCheckedAttr","type","isContainerValue","isEmptyContainer","length","Object","keys","isNotNestedPath","path","test","isNativeMultiSelect","el","isNativeSelect","multiple","tagName","isNativeMultiSelectNode","tag","attrs","hasTruthyBindingValue","includes","shouldHaveValueBinding","isFormSubmitEvent","evt","isEvent","target","Event","srcElement","isPropPresent","prop","cleanupNonNestedPath","replace","getFromPath","object","fallback","resolvedValue","split","filter","Boolean","reduce","acc","propKey","setInPath","i","unset","key","splice","unsetPath","pathValues","map","_","idx","slice","join","keysOf","record","injectWithSelf","symbol","def","vm","provides","message","normalizeField","field","resolveNextCheckboxValue","currentValue","checkedValue","uncheckedValue","newVal","indexOf","push","throttle","func","limit","inThrottle","lastResult","args","context","setTimeout","apply","debounceAsync","inner","ms","timer","resolves","window","clearTimeout","result","forEach","r","Promise","resolve","applyModelModifiers","modifiers","number","normalizeChildren","slotProps","slots","default","_a","_b","call","getBoundValue","hasValueBinding","_value","normalizeEventValue","input","files","from","options","opt","selected","disabled","selectedOption","find","normalizeRules","rules","defineProperty","writable","enumerable","configurable","_$$isNormalized","prev","curr","params","normalizeParams","buildParams","rule","parsedRule","parseRule","name","provided","mapValueToLocator","createLocator","RegExp","locator","crossTable","val","extractLocators","DEFAULT_CONFIG","generateMessage","bails","validateOnBlur","validateOnChange","validateOnInput","validateOnModelUpdate","currentConfig","assign","getConfig","setConfig","newConf","configure","shouldBail","formData","values","_validate","errors","valid","validateFieldWithYup","ctx","form","pipeline","isValid","_generateFieldError","normalizedContext","rulesKeys","_test","error","opts","abortEarly","then","catch","err","fillTargetValues","fieldCtx","normalize","param","validateYupSchema","schema","errorObjects","results","messages","validateObjectSchema","paths","validations","_c","fieldResult","names","bailsMap","isAllValid","validationResults","all","set","klona","get","x","k","list","tmp","str","prototype","toString","create","__proto__","Set","add","Map","Date","source","flags","constructor","buffer","getOwnPropertySymbols","getOwnPropertyDescriptor","getOwnPropertyNames","hasOwnProperty","es6","equal","a","b","size","entries","has","ArrayBuffer","isView","valueOf","ID_COUNTER","useFieldState","init","initialValue","setInitialValue","_useFieldValue","modelValue","standalone","errorMessage","setErrors","_useFieldErrors","meta","_useFieldMeta","MAX_SAFE_INTEGER","setState","state","touched","shouldInjectForm","modelRef","resolveInitialValue","initialValues","setFieldInitialValue","stageInitialValue","setFieldValue","pending","validated","dirty","immediate","flush","normalizeErrors","errorBag","setFieldErrorBag","installDevtoolsPlugin","app","process","env","NODE_ENV","label","packageName","homepage","logo","setupApiHooks","DEVTOOLS_FORMS","DEVTOOLS_FIELDS","API","refreshInspector","sendInspectorState","INSPECTOR_ID","sendInspectorTree","registerFormWithDevTools","appContext","formId","_vm","registerSingleFieldWithDevtools","COLORS","success","unknown","white","black","blue","purple","orange","gray","SELECTED_NODE","api","addInspector","icon","noSelectionText","actions","tooltip","action","console","log","resetField","resetForm","on","getInspectorTree","payload","inspectorId","forms","fields","rootNodes","mapFormForDevtoolsInspector","mapFieldForDevtoolsInspector","getInspectorState","currentTab","decodeNodeId","nodeId","buildFormState","buildFieldState","textColor","bgColor","getTagTheme","formTreeNodes","fieldsByPath","fieldInstance","buildFormTree","tree","pop","children","c","String","encodeNodeId","tags","backgroundColor","isGroup","fieldItem","encodeIndex","fieldPath","fieldGroup","idObject","f","ff","btoa","JSON","stringify","parse","atob","isSubmitting","submitCount","fieldOrForm","useField","useCheckboxField","_useField","validateOnMount","validateOnValueUpdate","keepValueOnUnmount","modelPropName","syncVModel","normalizeOptions","markedForRemoval","useVModel","handleChange","handleBlur","normalizedRules","rulesValue","extractRuleFromSchema","validateCurrentValue","mode","validateSchema","validateWithStateMutation","validateValidStateOnly","validate$1","e","shouldValidate","newValue","setTouched","isTouched","unwatchValue","watchValue","oldVal","validateFn","deep","setValue","handleReset","oldValue","register","unregister","dependencies","rulesVal","deps","dep","depAcc","depName","depValue","oldDeps","defaults","valueProp","fieldName","patchCheckboxApi","checked","checkedVal","handleCheckboxChange","shouldKeepValue","keepValuesOnUnmount","propName","emitName","props","getCurrentModelValue","emit","propValue","modelModifiers","FieldImpl","inheritAttrs","as","required","Function","keepValue","setup","validateField","onChangeHandler","handleChangeWithModel","handleInput","onInputHandler","handleInputWithModel","fieldProps","resolveValidationTriggers","baseOnBlur","onBlur","baseOnInput","onInput","baseOnChange","onChange","resolveTag","expose","reset","_d","Field","FORM_COUNTER","useForm","RESET_LOCK","fieldArrays","formValues","setErrorBag","useErrorBag","initialErrors","bag","getFirstFieldAtPath","fieldOrGroup","fieldExists","fieldNames","fieldBailsMap","originalInitialValues","setInitialValues","useFormInitialValues","useFormMeta","validationSchema","formCtx","registerField","unregisterField","setValues","setFieldError","setFieldTouched","handleSubmit","unsetInitialValue","useFieldModel","isFieldGroup","applyFieldMutation","mutation","mutateAllFields","force","clonedValue","createModel","insertFieldAtPath","rawField","fieldAtPath","removeFieldFromPath","findIndex","newPath","oldPath","initialErrorMessage","validation","every","onValidationError","submissionHandler","preventDefault","stopPropagation","returnVal","updateOriginal","_validateSchema","schemaValue","formResult","debouncedSilentValidation","debouncedValidation","fieldsById","currentErrorsPaths","wasValidated","some","submitForm","submit","initialTouched","currentValues","MERGE_STRATEGIES","isDirty","calculateFlags","flat","flag","mergeMethod","providedValues","updateFields","wasTouched","normalizeErrorItem","FormImpl","onSubmit","onInvalidSubmit","keepValues","handleFormReset","onReset","handleScopedSlotSubmit","onSuccess","renderForm","formAttrs","novalidate","Form","useFieldArray","arrayPath","noOp","noOpApi","remove","swap","insert","update","prepend","move","alreadyExists","entryCounter","initFields","createEntry","updateEntryFlags","fieldsLength","entry","isFirst","isLast","pathName","pathValue","normalizedPathValue","indexA","indexB","newFields","temp","tempEntry","arr","unshift","oldIdx","newIdx","movedItem","movedValue","fieldArrayCtx","FieldArrayImpl","FieldArray","ErrorMessageImpl","role","ErrorMessage","useResetForm","useIsFieldDirty","useIsFieldTouched","useIsFieldValid","useIsSubmitting","useValidateField","useIsFormDirty","useIsFormTouched","useIsFormValid","useValidateForm","useSubmitCount","useFieldValue","useFormValues","useFormErrors","useFieldError","useSubmitForm","cb"],"sources":["/Users/lukedavid/Desktop/CB/Flywheel/node_modules/vee-validate/dist/vee-validate.esm.js"],"sourcesContent":["/**\n  * vee-validate v4.6.1\n  * (c) 2022 Abdelrahman Awad\n  * @license MIT\n  */\nimport { inject, getCurrentInstance, warn as warn$1, ref, unref, computed, reactive, watch, onUnmounted, nextTick, onMounted, provide, isRef, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, watchEffect, markRaw } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nfunction isCallable(fn) {\r\n    return typeof fn === 'function';\r\n}\r\nfunction isNullOrUndefined(value) {\r\n    return value === null || value === undefined;\r\n}\r\nconst isObject = (obj) => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\r\nfunction isIndex(value) {\r\n    return Number(value) >= 0;\r\n}\r\nfunction toNumber(value) {\r\n    const n = parseFloat(value);\r\n    return isNaN(n) ? value : n;\r\n}\n\nconst RULES = {};\r\n/**\r\n * Adds a custom validator to the list of validation rules.\r\n */\r\nfunction defineRule(id, validator) {\r\n    // makes sure new rules are properly formatted.\r\n    guardExtend(id, validator);\r\n    RULES[id] = validator;\r\n}\r\n/**\r\n * Gets an already defined rule\r\n */\r\nfunction resolveRule(id) {\r\n    return RULES[id];\r\n}\r\n/**\r\n * Guards from extension violations.\r\n */\r\nfunction guardExtend(id, validator) {\r\n    if (isCallable(validator)) {\r\n        return;\r\n    }\r\n    throw new Error(`Extension Error: The validator '${id}' must be a function.`);\r\n}\n\nconst FormContextKey = Symbol('vee-validate-form');\r\nconst FieldContextKey = Symbol('vee-validate-field-instance');\r\nconst IS_ABSENT = Symbol('Default empty value');\n\nfunction isLocator(value) {\r\n    return isCallable(value) && !!value.__locatorRef;\r\n}\r\nfunction isYupValidator(value) {\r\n    return !!value && isCallable(value.validate);\r\n}\r\nfunction hasCheckedAttr(type) {\r\n    return type === 'checkbox' || type === 'radio';\r\n}\r\nfunction isContainerValue(value) {\r\n    return isObject(value) || Array.isArray(value);\r\n}\r\n/**\r\n * True if the value is an empty object or array\r\n */\r\nfunction isEmptyContainer(value) {\r\n    if (Array.isArray(value)) {\r\n        return value.length === 0;\r\n    }\r\n    return isObject(value) && Object.keys(value).length === 0;\r\n}\r\n/**\r\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\r\n */\r\nfunction isNotNestedPath(path) {\r\n    return /^\\[.+\\]$/i.test(path);\r\n}\r\n/**\r\n * Checks if an element is a native HTML5 multi-select input element\r\n */\r\nfunction isNativeMultiSelect(el) {\r\n    return isNativeSelect(el) && el.multiple;\r\n}\r\n/**\r\n * Checks if an element is a native HTML5 select input element\r\n */\r\nfunction isNativeSelect(el) {\r\n    return el.tagName === 'SELECT';\r\n}\r\n/**\r\n * Checks if a tag name with attrs object will render a native multi-select element\r\n */\r\nfunction isNativeMultiSelectNode(tag, attrs) {\r\n    // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\r\n    const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\r\n    return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\r\n}\r\n/**\r\n * Checks if a node should have a `:value` binding or not\r\n *\r\n * These nodes should not have a value binding\r\n * For files, because they are not reactive\r\n * For multi-selects because the value binding will reset the value\r\n */\r\nfunction shouldHaveValueBinding(tag, attrs) {\r\n    return !isNativeMultiSelectNode(tag, attrs) && attrs.type !== 'file' && !hasCheckedAttr(attrs.type);\r\n}\r\nfunction isFormSubmitEvent(evt) {\r\n    return isEvent(evt) && evt.target && 'submit' in evt.target;\r\n}\r\nfunction isEvent(evt) {\r\n    if (!evt) {\r\n        return false;\r\n    }\r\n    if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\r\n        return true;\r\n    }\r\n    // this is for IE and Cypress #3161\r\n    /* istanbul ignore next */\r\n    if (evt && evt.srcElement) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isPropPresent(obj, prop) {\r\n    return prop in obj && obj[prop] !== IS_ABSENT;\r\n}\n\nfunction cleanupNonNestedPath(path) {\r\n    if (isNotNestedPath(path)) {\r\n        return path.replace(/\\[|\\]/gi, '');\r\n    }\r\n    return path;\r\n}\r\nfunction getFromPath(object, path, fallback) {\r\n    if (!object) {\r\n        return fallback;\r\n    }\r\n    if (isNotNestedPath(path)) {\r\n        return object[cleanupNonNestedPath(path)];\r\n    }\r\n    const resolvedValue = (path || '')\r\n        .split(/\\.|\\[(\\d+)\\]/)\r\n        .filter(Boolean)\r\n        .reduce((acc, propKey) => {\r\n        if (isContainerValue(acc) && propKey in acc) {\r\n            return acc[propKey];\r\n        }\r\n        return fallback;\r\n    }, object);\r\n    return resolvedValue;\r\n}\r\n/**\r\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\r\n */\r\nfunction setInPath(object, path, value) {\r\n    if (isNotNestedPath(path)) {\r\n        object[cleanupNonNestedPath(path)] = value;\r\n        return;\r\n    }\r\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\r\n    let acc = object;\r\n    for (let i = 0; i < keys.length; i++) {\r\n        // Last key, set it\r\n        if (i === keys.length - 1) {\r\n            acc[keys[i]] = value;\r\n            return;\r\n        }\r\n        // Key does not exist, create a container for it\r\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\r\n            // container can be either an object or an array depending on the next key if it exists\r\n            acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\r\n        }\r\n        acc = acc[keys[i]];\r\n    }\r\n}\r\nfunction unset(object, key) {\r\n    if (Array.isArray(object) && isIndex(key)) {\r\n        object.splice(Number(key), 1);\r\n        return;\r\n    }\r\n    if (isObject(object)) {\r\n        delete object[key];\r\n    }\r\n}\r\n/**\r\n * Removes a nested property from object\r\n */\r\nfunction unsetPath(object, path) {\r\n    if (isNotNestedPath(path)) {\r\n        delete object[cleanupNonNestedPath(path)];\r\n        return;\r\n    }\r\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\r\n    let acc = object;\r\n    for (let i = 0; i < keys.length; i++) {\r\n        // Last key, unset it\r\n        if (i === keys.length - 1) {\r\n            unset(acc, keys[i]);\r\n            break;\r\n        }\r\n        // Key does not exist, exit\r\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\r\n            break;\r\n        }\r\n        acc = acc[keys[i]];\r\n    }\r\n    const pathValues = keys.map((_, idx) => {\r\n        return getFromPath(object, keys.slice(0, idx).join('.'));\r\n    });\r\n    for (let i = pathValues.length - 1; i >= 0; i--) {\r\n        if (!isEmptyContainer(pathValues[i])) {\r\n            continue;\r\n        }\r\n        if (i === 0) {\r\n            unset(object, keys[0]);\r\n            continue;\r\n        }\r\n        unset(pathValues[i - 1], keys[i - 1]);\r\n    }\r\n}\r\n/**\r\n * A typed version of Object.keys\r\n */\r\nfunction keysOf(record) {\r\n    return Object.keys(record);\r\n}\r\n// Uses same component provide as its own injections\r\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\r\nfunction injectWithSelf(symbol, def = undefined) {\r\n    const vm = getCurrentInstance();\r\n    return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\r\n}\r\nfunction warn(message) {\r\n    warn$1(`[vee-validate]: ${message}`);\r\n}\r\n/**\r\n * Ensures we deal with a singular field value\r\n */\r\nfunction normalizeField(field) {\r\n    if (Array.isArray(field)) {\r\n        return field[0];\r\n    }\r\n    return field;\r\n}\r\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\r\n    if (Array.isArray(currentValue)) {\r\n        const newVal = [...currentValue];\r\n        const idx = newVal.indexOf(checkedValue);\r\n        idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\r\n        return newVal;\r\n    }\r\n    return currentValue === checkedValue ? uncheckedValue : checkedValue;\r\n}\r\n/**\r\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\r\n * (`limit`)\r\n */\r\nfunction throttle(func, limit) {\r\n    let inThrottle;\r\n    let lastResult;\r\n    return function (...args) {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const context = this;\r\n        if (!inThrottle) {\r\n            inThrottle = true;\r\n            setTimeout(() => (inThrottle = false), limit);\r\n            lastResult = func.apply(context, args);\r\n        }\r\n        return lastResult;\r\n    };\r\n}\r\nfunction debounceAsync(inner, ms = 0) {\r\n    let timer = null;\r\n    let resolves = [];\r\n    return function (...args) {\r\n        // Run the function after a certain amount of time\r\n        if (timer) {\r\n            window.clearTimeout(timer);\r\n        }\r\n        timer = window.setTimeout(() => {\r\n            // Get the result of the inner function, then apply it to the resolve function of\r\n            // each promise that has been created since the last time the inner function was run\r\n            const result = inner(...args);\r\n            resolves.forEach(r => r(result));\r\n            resolves = [];\r\n        }, ms);\r\n        return new Promise(resolve => resolves.push(resolve));\r\n    };\r\n}\r\nfunction applyModelModifiers(value, modifiers) {\r\n    if (!isObject(modifiers)) {\r\n        return;\r\n    }\r\n    if (modifiers.number) {\r\n        return toNumber(value);\r\n    }\r\n    return value;\r\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst normalizeChildren = (tag, context, slotProps) => {\r\n    if (!context.slots.default) {\r\n        return context.slots.default;\r\n    }\r\n    if (typeof tag === 'string' || !tag) {\r\n        return context.slots.default(slotProps());\r\n    }\r\n    return {\r\n        default: () => { var _a, _b; return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps()); },\r\n    };\r\n};\r\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\r\nfunction getBoundValue(el) {\r\n    if (hasValueBinding(el)) {\r\n        return el._value;\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\r\nfunction hasValueBinding(el) {\r\n    return '_value' in el;\r\n}\n\nfunction normalizeEventValue(value) {\r\n    if (!isEvent(value)) {\r\n        return value;\r\n    }\r\n    const input = value.target;\r\n    // Vue sets the current bound value on `_value` prop\r\n    // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\r\n    if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\r\n        return getBoundValue(input);\r\n    }\r\n    if (input.type === 'file' && input.files) {\r\n        const files = Array.from(input.files);\r\n        return input.multiple ? files : files[0];\r\n    }\r\n    if (isNativeMultiSelect(input)) {\r\n        return Array.from(input.options)\r\n            .filter(opt => opt.selected && !opt.disabled)\r\n            .map(getBoundValue);\r\n    }\r\n    // makes sure we get the actual `option` bound value\r\n    // #3440\r\n    if (isNativeSelect(input)) {\r\n        const selectedOption = Array.from(input.options).find(opt => opt.selected);\r\n        return selectedOption ? getBoundValue(selectedOption) : input.value;\r\n    }\r\n    return input.value;\r\n}\n\n/**\r\n * Normalizes the given rules expression.\r\n */\r\nfunction normalizeRules(rules) {\r\n    const acc = {};\r\n    Object.defineProperty(acc, '_$$isNormalized', {\r\n        value: true,\r\n        writable: false,\r\n        enumerable: false,\r\n        configurable: false,\r\n    });\r\n    if (!rules) {\r\n        return acc;\r\n    }\r\n    // Object is already normalized, skip.\r\n    if (isObject(rules) && rules._$$isNormalized) {\r\n        return rules;\r\n    }\r\n    if (isObject(rules)) {\r\n        return Object.keys(rules).reduce((prev, curr) => {\r\n            const params = normalizeParams(rules[curr]);\r\n            if (rules[curr] !== false) {\r\n                prev[curr] = buildParams(params);\r\n            }\r\n            return prev;\r\n        }, acc);\r\n    }\r\n    /* istanbul ignore if */\r\n    if (typeof rules !== 'string') {\r\n        return acc;\r\n    }\r\n    return rules.split('|').reduce((prev, rule) => {\r\n        const parsedRule = parseRule(rule);\r\n        if (!parsedRule.name) {\r\n            return prev;\r\n        }\r\n        prev[parsedRule.name] = buildParams(parsedRule.params);\r\n        return prev;\r\n    }, acc);\r\n}\r\n/**\r\n * Normalizes a rule param.\r\n */\r\nfunction normalizeParams(params) {\r\n    if (params === true) {\r\n        return [];\r\n    }\r\n    if (Array.isArray(params)) {\r\n        return params;\r\n    }\r\n    if (isObject(params)) {\r\n        return params;\r\n    }\r\n    return [params];\r\n}\r\nfunction buildParams(provided) {\r\n    const mapValueToLocator = (value) => {\r\n        // A target param using interpolation\r\n        if (typeof value === 'string' && value[0] === '@') {\r\n            return createLocator(value.slice(1));\r\n        }\r\n        return value;\r\n    };\r\n    if (Array.isArray(provided)) {\r\n        return provided.map(mapValueToLocator);\r\n    }\r\n    // #3073\r\n    if (provided instanceof RegExp) {\r\n        return [provided];\r\n    }\r\n    return Object.keys(provided).reduce((prev, key) => {\r\n        prev[key] = mapValueToLocator(provided[key]);\r\n        return prev;\r\n    }, {});\r\n}\r\n/**\r\n * Parses a rule string expression.\r\n */\r\nconst parseRule = (rule) => {\r\n    let params = [];\r\n    const name = rule.split(':')[0];\r\n    if (rule.includes(':')) {\r\n        params = rule.split(':').slice(1).join(':').split(',');\r\n    }\r\n    return { name, params };\r\n};\r\nfunction createLocator(value) {\r\n    const locator = (crossTable) => {\r\n        const val = getFromPath(crossTable, value) || crossTable[value];\r\n        return val;\r\n    };\r\n    locator.__locatorRef = value;\r\n    return locator;\r\n}\r\nfunction extractLocators(params) {\r\n    if (Array.isArray(params)) {\r\n        return params.filter(isLocator);\r\n    }\r\n    return keysOf(params)\r\n        .filter(key => isLocator(params[key]))\r\n        .map(key => params[key]);\r\n}\n\nconst DEFAULT_CONFIG = {\r\n    generateMessage: ({ field }) => `${field} is not valid.`,\r\n    bails: true,\r\n    validateOnBlur: true,\r\n    validateOnChange: true,\r\n    validateOnInput: false,\r\n    validateOnModelUpdate: true,\r\n};\r\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\r\nconst getConfig = () => currentConfig;\r\nconst setConfig = (newConf) => {\r\n    currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\r\n};\r\nconst configure = setConfig;\n\n/**\r\n * Validates a value against the rules.\r\n */\r\nasync function validate(value, rules, options = {}) {\r\n    const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\r\n    const field = {\r\n        name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\r\n        rules,\r\n        bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\r\n        formData: (options === null || options === void 0 ? void 0 : options.values) || {},\r\n    };\r\n    const result = await _validate(field, value);\r\n    const errors = result.errors;\r\n    return {\r\n        errors,\r\n        valid: !errors.length,\r\n    };\r\n}\r\n/**\r\n * Starts the validation process.\r\n */\r\nasync function _validate(field, value) {\r\n    if (isYupValidator(field.rules)) {\r\n        return validateFieldWithYup(value, field.rules, { bails: field.bails });\r\n    }\r\n    // if a generic function or chain of generic functions\r\n    if (isCallable(field.rules) || Array.isArray(field.rules)) {\r\n        const ctx = {\r\n            field: field.name,\r\n            form: field.formData,\r\n            value: value,\r\n        };\r\n        // Normalize the pipeline\r\n        const pipeline = Array.isArray(field.rules) ? field.rules : [field.rules];\r\n        const length = pipeline.length;\r\n        const errors = [];\r\n        for (let i = 0; i < length; i++) {\r\n            const rule = pipeline[i];\r\n            const result = await rule(value, ctx);\r\n            const isValid = typeof result !== 'string' && result;\r\n            if (isValid) {\r\n                continue;\r\n            }\r\n            const message = typeof result === 'string' ? result : _generateFieldError(ctx);\r\n            errors.push(message);\r\n            if (field.bails) {\r\n                return {\r\n                    errors,\r\n                };\r\n            }\r\n        }\r\n        return {\r\n            errors,\r\n        };\r\n    }\r\n    const normalizedContext = Object.assign(Object.assign({}, field), { rules: normalizeRules(field.rules) });\r\n    const errors = [];\r\n    const rulesKeys = Object.keys(normalizedContext.rules);\r\n    const length = rulesKeys.length;\r\n    for (let i = 0; i < length; i++) {\r\n        const rule = rulesKeys[i];\r\n        const result = await _test(normalizedContext, value, {\r\n            name: rule,\r\n            params: normalizedContext.rules[rule],\r\n        });\r\n        if (result.error) {\r\n            errors.push(result.error);\r\n            if (field.bails) {\r\n                return {\r\n                    errors,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        errors,\r\n    };\r\n}\r\n/**\r\n * Handles yup validation\r\n */\r\nasync function validateFieldWithYup(value, validator, opts) {\r\n    var _a;\r\n    const errors = await validator\r\n        .validate(value, {\r\n        abortEarly: (_a = opts.bails) !== null && _a !== void 0 ? _a : true,\r\n    })\r\n        .then(() => [])\r\n        .catch((err) => {\r\n        // Yup errors have a name prop one them.\r\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\r\n        if (err.name === 'ValidationError') {\r\n            return err.errors;\r\n        }\r\n        // re-throw the error so we don't hide it\r\n        throw err;\r\n    });\r\n    return {\r\n        errors,\r\n    };\r\n}\r\n/**\r\n * Tests a single input value against a rule.\r\n */\r\nasync function _test(field, value, rule) {\r\n    const validator = resolveRule(rule.name);\r\n    if (!validator) {\r\n        throw new Error(`No such validator '${rule.name}' exists.`);\r\n    }\r\n    const params = fillTargetValues(rule.params, field.formData);\r\n    const ctx = {\r\n        field: field.name,\r\n        value,\r\n        form: field.formData,\r\n        rule: Object.assign(Object.assign({}, rule), { params }),\r\n    };\r\n    const result = await validator(value, params, ctx);\r\n    if (typeof result === 'string') {\r\n        return {\r\n            error: result,\r\n        };\r\n    }\r\n    return {\r\n        error: result ? undefined : _generateFieldError(ctx),\r\n    };\r\n}\r\n/**\r\n * Generates error messages.\r\n */\r\nfunction _generateFieldError(fieldCtx) {\r\n    const message = getConfig().generateMessage;\r\n    if (!message) {\r\n        return 'Field is invalid';\r\n    }\r\n    return message(fieldCtx);\r\n}\r\nfunction fillTargetValues(params, crossTable) {\r\n    const normalize = (value) => {\r\n        if (isLocator(value)) {\r\n            return value(crossTable);\r\n        }\r\n        return value;\r\n    };\r\n    if (Array.isArray(params)) {\r\n        return params.map(normalize);\r\n    }\r\n    return Object.keys(params).reduce((acc, param) => {\r\n        acc[param] = normalize(params[param]);\r\n        return acc;\r\n    }, {});\r\n}\r\nasync function validateYupSchema(schema, values) {\r\n    const errorObjects = await schema\r\n        .validate(values, { abortEarly: false })\r\n        .then(() => [])\r\n        .catch((err) => {\r\n        // Yup errors have a name prop one them.\r\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\r\n        if (err.name !== 'ValidationError') {\r\n            throw err;\r\n        }\r\n        // list of aggregated errors\r\n        return err.inner || [];\r\n    });\r\n    const results = {};\r\n    const errors = {};\r\n    for (const error of errorObjects) {\r\n        const messages = error.errors;\r\n        results[error.path] = { valid: !messages.length, errors: messages };\r\n        if (messages.length) {\r\n            errors[error.path] = messages[0];\r\n        }\r\n    }\r\n    return {\r\n        valid: !errorObjects.length,\r\n        results,\r\n        errors,\r\n    };\r\n}\r\nasync function validateObjectSchema(schema, values, opts) {\r\n    const paths = keysOf(schema);\r\n    const validations = paths.map(async (path) => {\r\n        var _a, _b, _c;\r\n        const fieldResult = await validate(getFromPath(values, path), schema[path], {\r\n            name: ((_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path]) || path,\r\n            values: values,\r\n            bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true,\r\n        });\r\n        return Object.assign(Object.assign({}, fieldResult), { path });\r\n    });\r\n    let isAllValid = true;\r\n    const validationResults = await Promise.all(validations);\r\n    const results = {};\r\n    const errors = {};\r\n    for (const result of validationResults) {\r\n        results[result.path] = {\r\n            valid: result.valid,\r\n            errors: result.errors,\r\n        };\r\n        if (!result.valid) {\r\n            isAllValid = false;\r\n            errors[result.path] = result.errors[0];\r\n        }\r\n    }\r\n    return {\r\n        valid: isAllValid,\r\n        results,\r\n        errors,\r\n    };\r\n}\n\nfunction set(obj, key, val) {\n\tif (typeof val.value === 'object') val.value = klona(val.value);\n\tif (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n\t\tObject.defineProperty(obj, key, val);\n\t} else obj[key] = val.value;\n}\n\nfunction klona(x) {\n\tif (typeof x !== 'object') return x;\n\n\tvar i=0, k, list, tmp, str=Object.prototype.toString.call(x);\n\n\tif (str === '[object Object]') {\n\t\ttmp = Object.create(x.__proto__ || null);\n\t} else if (str === '[object Array]') {\n\t\ttmp = Array(x.length);\n\t} else if (str === '[object Set]') {\n\t\ttmp = new Set;\n\t\tx.forEach(function (val) {\n\t\t\ttmp.add(klona(val));\n\t\t});\n\t} else if (str === '[object Map]') {\n\t\ttmp = new Map;\n\t\tx.forEach(function (val, key) {\n\t\t\ttmp.set(klona(key), klona(val));\n\t\t});\n\t} else if (str === '[object Date]') {\n\t\ttmp = new Date(+x);\n\t} else if (str === '[object RegExp]') {\n\t\ttmp = new RegExp(x.source, x.flags);\n\t} else if (str === '[object DataView]') {\n\t\ttmp = new x.constructor( klona(x.buffer) );\n\t} else if (str === '[object ArrayBuffer]') {\n\t\ttmp = x.slice(0);\n\t} else if (str.slice(-6) === 'Array]') {\n\t\t// ArrayBuffer.isView(x)\n\t\t// ~> `new` bcuz `Buffer.slice` => ref\n\t\ttmp = new x.constructor(x);\n\t}\n\n\tif (tmp) {\n\t\tfor (list=Object.getOwnPropertySymbols(x); i < list.length; i++) {\n\t\t\tset(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n\t\t}\n\n\t\tfor (i=0, list=Object.getOwnPropertyNames(x); i < list.length; i++) {\n\t\t\tif (Object.hasOwnProperty.call(tmp, k=list[i]) && tmp[k] === x[k]) continue;\n\t\t\tset(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n\t\t}\n\t}\n\n\treturn tmp || x;\n}\n\nvar es6 = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n    if ((a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      for (i of a.entries())\n        if (!equal(i[1], b.get(i[0]))) return false;\n      return true;\n    }\n\n    if ((a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      return true;\n    }\n\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n\nlet ID_COUNTER = 0;\r\nfunction useFieldState(path, init) {\r\n    const { value, initialValue, setInitialValue } = _useFieldValue(path, init.modelValue, !init.standalone);\r\n    const { errorMessage, errors, setErrors } = _useFieldErrors(path, !init.standalone);\r\n    const meta = _useFieldMeta(value, initialValue, errors);\r\n    const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\r\n    function setState(state) {\r\n        var _a;\r\n        if ('value' in state) {\r\n            value.value = state.value;\r\n        }\r\n        if ('errors' in state) {\r\n            setErrors(state.errors);\r\n        }\r\n        if ('touched' in state) {\r\n            meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\r\n        }\r\n        if ('initialValue' in state) {\r\n            setInitialValue(state.initialValue);\r\n        }\r\n    }\r\n    return {\r\n        id,\r\n        path,\r\n        value,\r\n        initialValue,\r\n        meta,\r\n        errors,\r\n        errorMessage,\r\n        setState,\r\n    };\r\n}\r\n/**\r\n * Creates the field value and resolves the initial value\r\n */\r\nfunction _useFieldValue(path, modelValue, shouldInjectForm = true) {\r\n    const form = shouldInjectForm === true ? injectWithSelf(FormContextKey, undefined) : undefined;\r\n    const modelRef = ref(unref(modelValue));\r\n    function resolveInitialValue() {\r\n        if (!form) {\r\n            return unref(modelRef);\r\n        }\r\n        return getFromPath(form.meta.value.initialValues, unref(path), unref(modelRef));\r\n    }\r\n    function setInitialValue(value) {\r\n        if (!form) {\r\n            modelRef.value = value;\r\n            return;\r\n        }\r\n        form.setFieldInitialValue(unref(path), value);\r\n    }\r\n    const initialValue = computed(resolveInitialValue);\r\n    // if no form is associated, use a regular ref.\r\n    if (!form) {\r\n        const value = ref(resolveInitialValue());\r\n        return {\r\n            value,\r\n            initialValue,\r\n            setInitialValue,\r\n        };\r\n    }\r\n    // to set the initial value, first check if there is a current value, if there is then use it.\r\n    // otherwise use the configured initial value if it exists.\r\n    // prioritize model value over form values\r\n    // #3429\r\n    const currentValue = modelValue ? unref(modelValue) : getFromPath(form.values, unref(path), unref(initialValue));\r\n    form.stageInitialValue(unref(path), currentValue, true);\r\n    // otherwise use a computed setter that triggers the `setFieldValue`\r\n    const value = computed({\r\n        get() {\r\n            return getFromPath(form.values, unref(path));\r\n        },\r\n        set(newVal) {\r\n            form.setFieldValue(unref(path), newVal);\r\n        },\r\n    });\r\n    return {\r\n        value,\r\n        initialValue,\r\n        setInitialValue,\r\n    };\r\n}\r\n/**\r\n * Creates meta flags state and some associated effects with them\r\n */\r\nfunction _useFieldMeta(currentValue, initialValue, errors) {\r\n    const meta = reactive({\r\n        touched: false,\r\n        pending: false,\r\n        valid: true,\r\n        validated: !!unref(errors).length,\r\n        initialValue: computed(() => unref(initialValue)),\r\n        dirty: computed(() => {\r\n            return !es6(unref(currentValue), unref(initialValue));\r\n        }),\r\n    });\r\n    watch(errors, value => {\r\n        meta.valid = !value.length;\r\n    }, {\r\n        immediate: true,\r\n        flush: 'sync',\r\n    });\r\n    return meta;\r\n}\r\n/**\r\n * Creates the error message state for the field state\r\n */\r\nfunction _useFieldErrors(path, shouldInjectForm) {\r\n    const form = shouldInjectForm ? injectWithSelf(FormContextKey, undefined) : undefined;\r\n    function normalizeErrors(messages) {\r\n        if (!messages) {\r\n            return [];\r\n        }\r\n        return Array.isArray(messages) ? messages : [messages];\r\n    }\r\n    if (!form) {\r\n        const errors = ref([]);\r\n        return {\r\n            errors,\r\n            errorMessage: computed(() => errors.value[0]),\r\n            setErrors: (messages) => {\r\n                errors.value = normalizeErrors(messages);\r\n            },\r\n        };\r\n    }\r\n    const errors = computed(() => form.errorBag.value[unref(path)] || []);\r\n    return {\r\n        errors,\r\n        errorMessage: computed(() => errors.value[0]),\r\n        setErrors: (messages) => {\r\n            form.setFieldErrorBag(unref(path), normalizeErrors(messages));\r\n        },\r\n    };\r\n}\n\nfunction installDevtoolsPlugin(app) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        setupDevtoolsPlugin({\r\n            id: 'vee-validate-devtools-plugin',\r\n            label: 'VeeValidate Plugin',\r\n            packageName: 'vee-validate',\r\n            homepage: 'https://vee-validate.logaretm.com/v4',\r\n            app,\r\n            logo: 'https://vee-validate.logaretm.com/v4/logo.png',\r\n        }, setupApiHooks);\r\n    }\r\n}\r\nconst DEVTOOLS_FORMS = {};\r\nconst DEVTOOLS_FIELDS = {};\r\nlet API;\r\nconst refreshInspector = throttle(() => {\r\n    setTimeout(async () => {\r\n        await nextTick();\r\n        API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\r\n        API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\r\n    }, 100);\r\n}, 100);\r\nfunction registerFormWithDevTools(form) {\r\n    const vm = getCurrentInstance();\r\n    if (!API) {\r\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\r\n        if (!app) {\r\n            return;\r\n        }\r\n        installDevtoolsPlugin(app);\r\n    }\r\n    DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\r\n    DEVTOOLS_FORMS[form.formId]._vm = vm;\r\n    onUnmounted(() => {\r\n        delete DEVTOOLS_FORMS[form.formId];\r\n        refreshInspector();\r\n    });\r\n    refreshInspector();\r\n}\r\nfunction registerSingleFieldWithDevtools(field) {\r\n    const vm = getCurrentInstance();\r\n    if (!API) {\r\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\r\n        if (!app) {\r\n            return;\r\n        }\r\n        installDevtoolsPlugin(app);\r\n    }\r\n    DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\r\n    DEVTOOLS_FIELDS[field.id]._vm = vm;\r\n    onUnmounted(() => {\r\n        delete DEVTOOLS_FIELDS[field.id];\r\n        refreshInspector();\r\n    });\r\n    refreshInspector();\r\n}\r\nconst INSPECTOR_ID = 'vee-validate-inspector';\r\nconst COLORS = {\r\n    error: 0xbd4b4b,\r\n    success: 0x06d77b,\r\n    unknown: 0x54436b,\r\n    white: 0xffffff,\r\n    black: 0x000000,\r\n    blue: 0x035397,\r\n    purple: 0xb980f0,\r\n    orange: 0xf5a962,\r\n    gray: 0xbbbfca,\r\n};\r\nlet SELECTED_NODE = null;\r\nfunction setupApiHooks(api) {\r\n    API = api;\r\n    api.addInspector({\r\n        id: INSPECTOR_ID,\r\n        icon: 'rule',\r\n        label: 'vee-validate',\r\n        noSelectionText: 'Select a vee-validate node to inspect',\r\n        actions: [\r\n            {\r\n                icon: 'done_outline',\r\n                tooltip: 'Validate selected item',\r\n                action: async () => {\r\n                    if (!SELECTED_NODE) {\r\n                        console.error('There is not a valid selected vee-validate node or component');\r\n                        return;\r\n                    }\r\n                    const result = await SELECTED_NODE.validate();\r\n                    console.log(result);\r\n                },\r\n            },\r\n            {\r\n                icon: 'delete_sweep',\r\n                tooltip: 'Clear validation state of the selected item',\r\n                action: () => {\r\n                    if (!SELECTED_NODE) {\r\n                        console.error('There is not a valid selected vee-validate node or component');\r\n                        return;\r\n                    }\r\n                    if ('id' in SELECTED_NODE) {\r\n                        SELECTED_NODE.resetField();\r\n                        return;\r\n                    }\r\n                    SELECTED_NODE.resetForm();\r\n                },\r\n            },\r\n        ],\r\n    });\r\n    api.on.getInspectorTree(payload => {\r\n        if (payload.inspectorId !== INSPECTOR_ID) {\r\n            return;\r\n        }\r\n        const forms = Object.values(DEVTOOLS_FORMS);\r\n        const fields = Object.values(DEVTOOLS_FIELDS);\r\n        payload.rootNodes = [\r\n            ...forms.map(mapFormForDevtoolsInspector),\r\n            ...fields.map(field => mapFieldForDevtoolsInspector(field)),\r\n        ];\r\n    });\r\n    api.on.getInspectorState((payload, ctx) => {\r\n        if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\r\n            return;\r\n        }\r\n        const { form, field, type } = decodeNodeId(payload.nodeId);\r\n        if (form && type === 'form') {\r\n            payload.state = buildFormState(form);\r\n            SELECTED_NODE = form;\r\n            return;\r\n        }\r\n        if (field && type === 'field') {\r\n            payload.state = buildFieldState(field);\r\n            SELECTED_NODE = field;\r\n            return;\r\n        }\r\n        SELECTED_NODE = null;\r\n    });\r\n}\r\nfunction mapFormForDevtoolsInspector(form) {\r\n    const { textColor, bgColor } = getTagTheme(form);\r\n    const formTreeNodes = {};\r\n    Object.values(form.fieldsByPath.value).forEach(field => {\r\n        const fieldInstance = Array.isArray(field) ? field[0] : field;\r\n        if (!fieldInstance) {\r\n            return;\r\n        }\r\n        setInPath(formTreeNodes, unref(fieldInstance.name), mapFieldForDevtoolsInspector(fieldInstance, form));\r\n    });\r\n    function buildFormTree(tree, path = []) {\r\n        const key = [...path].pop();\r\n        if ('id' in tree) {\r\n            return Object.assign(Object.assign({}, tree), { label: key || tree.label });\r\n        }\r\n        if (isObject(tree)) {\r\n            return {\r\n                id: `${path.join('.')}`,\r\n                label: key || '',\r\n                children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key])),\r\n            };\r\n        }\r\n        if (Array.isArray(tree)) {\r\n            return {\r\n                id: `${path.join('.')}`,\r\n                label: `${key}[]`,\r\n                children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)])),\r\n            };\r\n        }\r\n        return { id: '', label: '', children: [] };\r\n    }\r\n    const { children } = buildFormTree(formTreeNodes);\r\n    return {\r\n        id: encodeNodeId(form),\r\n        label: 'Form',\r\n        children,\r\n        tags: [\r\n            {\r\n                label: 'Form',\r\n                textColor,\r\n                backgroundColor: bgColor,\r\n            },\r\n            {\r\n                label: `${Object.keys(form.fieldsByPath.value).length} fields`,\r\n                textColor: COLORS.white,\r\n                backgroundColor: COLORS.unknown,\r\n            },\r\n        ],\r\n    };\r\n}\r\nfunction mapFieldForDevtoolsInspector(field, form) {\r\n    const fieldInstance = normalizeField(field);\r\n    const { textColor, bgColor } = getTagTheme(fieldInstance);\r\n    const isGroup = Array.isArray(field) && field.length > 1;\r\n    return {\r\n        id: encodeNodeId(form, fieldInstance, !isGroup),\r\n        label: unref(fieldInstance.name),\r\n        children: Array.isArray(field) ? field.map(fieldItem => mapFieldForDevtoolsInspector(fieldItem, form)) : undefined,\r\n        tags: [\r\n            isGroup\r\n                ? undefined\r\n                : {\r\n                    label: 'Field',\r\n                    textColor,\r\n                    backgroundColor: bgColor,\r\n                },\r\n            !form\r\n                ? {\r\n                    label: 'Standalone',\r\n                    textColor: COLORS.black,\r\n                    backgroundColor: COLORS.gray,\r\n                }\r\n                : undefined,\r\n            !isGroup && fieldInstance.type === 'checkbox'\r\n                ? {\r\n                    label: 'Checkbox',\r\n                    textColor: COLORS.white,\r\n                    backgroundColor: COLORS.blue,\r\n                }\r\n                : undefined,\r\n            !isGroup && fieldInstance.type === 'radio'\r\n                ? {\r\n                    label: 'Radio',\r\n                    textColor: COLORS.white,\r\n                    backgroundColor: COLORS.purple,\r\n                }\r\n                : undefined,\r\n            isGroup\r\n                ? {\r\n                    label: 'Group',\r\n                    textColor: COLORS.black,\r\n                    backgroundColor: COLORS.orange,\r\n                }\r\n                : undefined,\r\n        ].filter(Boolean),\r\n    };\r\n}\r\nfunction encodeNodeId(form, field, encodeIndex = true) {\r\n    const fieldPath = form ? unref(field === null || field === void 0 ? void 0 : field.name) : field === null || field === void 0 ? void 0 : field.id;\r\n    const fieldGroup = fieldPath ? form === null || form === void 0 ? void 0 : form.fieldsByPath.value[fieldPath] : undefined;\r\n    let idx;\r\n    if (encodeIndex && field && Array.isArray(fieldGroup)) {\r\n        idx = fieldGroup.indexOf(field);\r\n    }\r\n    const idObject = { f: form === null || form === void 0 ? void 0 : form.formId, ff: fieldPath, idx, type: field ? 'field' : 'form' };\r\n    return btoa(JSON.stringify(idObject));\r\n}\r\nfunction decodeNodeId(nodeId) {\r\n    try {\r\n        const idObject = JSON.parse(atob(nodeId));\r\n        const form = DEVTOOLS_FORMS[idObject.f];\r\n        if (!form && idObject.ff) {\r\n            const field = DEVTOOLS_FIELDS[idObject.ff];\r\n            if (!field) {\r\n                return {};\r\n            }\r\n            return {\r\n                type: idObject.type,\r\n                field,\r\n            };\r\n        }\r\n        if (!form) {\r\n            return {};\r\n        }\r\n        const fieldGroup = form.fieldsByPath.value[idObject.ff];\r\n        return {\r\n            type: idObject.type,\r\n            form,\r\n            field: Array.isArray(fieldGroup) ? fieldGroup[idObject.idx || 0] : fieldGroup,\r\n        };\r\n    }\r\n    catch (err) {\r\n        // console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\r\n    }\r\n    return {};\r\n}\r\nfunction buildFieldState(field) {\r\n    const { errors, meta, value } = field;\r\n    return {\r\n        'Field state': [\r\n            { key: 'errors', value: errors.value },\r\n            {\r\n                key: 'initialValue',\r\n                value: meta.initialValue,\r\n            },\r\n            {\r\n                key: 'currentValue',\r\n                value: value.value,\r\n            },\r\n            {\r\n                key: 'touched',\r\n                value: meta.touched,\r\n            },\r\n            {\r\n                key: 'dirty',\r\n                value: meta.dirty,\r\n            },\r\n            {\r\n                key: 'valid',\r\n                value: meta.valid,\r\n            },\r\n        ],\r\n    };\r\n}\r\nfunction buildFormState(form) {\r\n    const { errorBag, meta, values, isSubmitting, submitCount } = form;\r\n    return {\r\n        'Form state': [\r\n            {\r\n                key: 'submitCount',\r\n                value: submitCount.value,\r\n            },\r\n            {\r\n                key: 'isSubmitting',\r\n                value: isSubmitting.value,\r\n            },\r\n            {\r\n                key: 'touched',\r\n                value: meta.value.touched,\r\n            },\r\n            {\r\n                key: 'dirty',\r\n                value: meta.value.dirty,\r\n            },\r\n            {\r\n                key: 'valid',\r\n                value: meta.value.valid,\r\n            },\r\n            {\r\n                key: 'initialValues',\r\n                value: meta.value.initialValues,\r\n            },\r\n            {\r\n                key: 'currentValues',\r\n                value: values,\r\n            },\r\n            {\r\n                key: 'errors',\r\n                value: keysOf(errorBag.value).reduce((acc, key) => {\r\n                    var _a;\r\n                    const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\r\n                    if (message) {\r\n                        acc[key] = message;\r\n                    }\r\n                    return acc;\r\n                }, {}),\r\n            },\r\n        ],\r\n    };\r\n}\r\n/**\r\n * Resolves the tag color based on the form state\r\n */\r\nfunction getTagTheme(fieldOrForm) {\r\n    // const fallbackColors = {\r\n    //   bgColor: COLORS.unknown,\r\n    //   textColor: COLORS.white,\r\n    // };\r\n    const isValid = 'id' in fieldOrForm ? fieldOrForm.meta.valid : fieldOrForm.meta.value.valid;\r\n    return {\r\n        bgColor: isValid ? COLORS.success : COLORS.error,\r\n        textColor: isValid ? COLORS.black : COLORS.white,\r\n    };\r\n}\n\n/**\r\n * Creates a field composite.\r\n */\r\nfunction useField(name, rules, opts) {\r\n    if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\r\n        return useCheckboxField(name, rules, opts);\r\n    }\r\n    return _useField(name, rules, opts);\r\n}\r\nfunction _useField(name, rules, opts) {\r\n    const { initialValue: modelValue, validateOnMount, bails, type, checkedValue, label, validateOnValueUpdate, uncheckedValue, standalone, keepValueOnUnmount, modelPropName, syncVModel, } = normalizeOptions(unref(name), opts);\r\n    const form = !standalone ? injectWithSelf(FormContextKey) : undefined;\r\n    // a flag indicating if the field is about to be removed/unmounted.\r\n    let markedForRemoval = false;\r\n    const { id, value, initialValue, meta, setState, errors, errorMessage } = useFieldState(name, {\r\n        modelValue,\r\n        standalone,\r\n    });\r\n    if (syncVModel) {\r\n        useVModel({ value, prop: modelPropName, handleChange });\r\n    }\r\n    /**\r\n     * Handles common onBlur meta update\r\n     */\r\n    const handleBlur = () => {\r\n        meta.touched = true;\r\n    };\r\n    const normalizedRules = computed(() => {\r\n        let rulesValue = unref(rules);\r\n        const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\r\n        if (schema && !isYupValidator(schema)) {\r\n            rulesValue = extractRuleFromSchema(schema, unref(name)) || rulesValue;\r\n        }\r\n        if (isYupValidator(rulesValue) || isCallable(rulesValue) || Array.isArray(rulesValue)) {\r\n            return rulesValue;\r\n        }\r\n        return normalizeRules(rulesValue);\r\n    });\r\n    async function validateCurrentValue(mode) {\r\n        var _a, _b;\r\n        if (form === null || form === void 0 ? void 0 : form.validateSchema) {\r\n            return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : { valid: true, errors: [] };\r\n        }\r\n        return validate(value.value, normalizedRules.value, {\r\n            name: unref(label) || unref(name),\r\n            values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\r\n            bails,\r\n        });\r\n    }\r\n    async function validateWithStateMutation() {\r\n        meta.pending = true;\r\n        meta.validated = true;\r\n        const result = await validateCurrentValue('validated-only');\r\n        if (markedForRemoval) {\r\n            result.valid = true;\r\n            result.errors = [];\r\n        }\r\n        setState({ errors: result.errors });\r\n        meta.pending = false;\r\n        return result;\r\n    }\r\n    async function validateValidStateOnly() {\r\n        const result = await validateCurrentValue('silent');\r\n        if (markedForRemoval) {\r\n            result.valid = true;\r\n        }\r\n        meta.valid = result.valid;\r\n        return result;\r\n    }\r\n    function validate$1(opts) {\r\n        if (!(opts === null || opts === void 0 ? void 0 : opts.mode) || (opts === null || opts === void 0 ? void 0 : opts.mode) === 'force') {\r\n            return validateWithStateMutation();\r\n        }\r\n        if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'validated-only') {\r\n            return validateWithStateMutation();\r\n        }\r\n        return validateValidStateOnly();\r\n    }\r\n    // Common input/change event handler\r\n    function handleChange(e, shouldValidate = true) {\r\n        const newValue = normalizeEventValue(e);\r\n        value.value = newValue;\r\n        if (!validateOnValueUpdate && shouldValidate) {\r\n            validateWithStateMutation();\r\n        }\r\n    }\r\n    // Runs the initial validation\r\n    onMounted(() => {\r\n        if (validateOnMount) {\r\n            return validateWithStateMutation();\r\n        }\r\n        // validate self initially if no form was handling this\r\n        // forms should have their own initial silent validation run to make things more efficient\r\n        if (!form || !form.validateSchema) {\r\n            validateValidStateOnly();\r\n        }\r\n    });\r\n    function setTouched(isTouched) {\r\n        meta.touched = isTouched;\r\n    }\r\n    let unwatchValue;\r\n    function watchValue() {\r\n        unwatchValue = watch(value, (val, oldVal) => {\r\n            if (es6(val, oldVal)) {\r\n                return;\r\n            }\r\n            const validateFn = validateOnValueUpdate ? validateWithStateMutation : validateValidStateOnly;\r\n            validateFn();\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    watchValue();\r\n    function resetField(state) {\r\n        var _a;\r\n        unwatchValue === null || unwatchValue === void 0 ? void 0 : unwatchValue();\r\n        const newValue = state && 'value' in state ? state.value : initialValue.value;\r\n        setState({\r\n            value: klona(newValue),\r\n            initialValue: klona(newValue),\r\n            touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\r\n            errors: (state === null || state === void 0 ? void 0 : state.errors) || [],\r\n        });\r\n        meta.pending = false;\r\n        meta.validated = false;\r\n        validateValidStateOnly();\r\n        // need to watch at next tick to avoid triggering the value watcher\r\n        nextTick(() => {\r\n            watchValue();\r\n        });\r\n    }\r\n    function setValue(newValue) {\r\n        value.value = newValue;\r\n    }\r\n    function setErrors(errors) {\r\n        setState({ errors: Array.isArray(errors) ? errors : [errors] });\r\n    }\r\n    const field = {\r\n        id,\r\n        name,\r\n        label,\r\n        value,\r\n        meta,\r\n        errors,\r\n        errorMessage,\r\n        type,\r\n        checkedValue,\r\n        uncheckedValue,\r\n        bails,\r\n        keepValueOnUnmount,\r\n        resetField,\r\n        handleReset: () => resetField(),\r\n        validate: validate$1,\r\n        handleChange,\r\n        handleBlur,\r\n        setState,\r\n        setTouched,\r\n        setErrors,\r\n        setValue,\r\n    };\r\n    provide(FieldContextKey, field);\r\n    if (isRef(rules) && typeof unref(rules) !== 'function') {\r\n        watch(rules, (value, oldValue) => {\r\n            if (es6(value, oldValue)) {\r\n                return;\r\n            }\r\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        field._vm = getCurrentInstance();\r\n        watch(() => (Object.assign(Object.assign({ errors: errors.value }, meta), { value: value.value })), refreshInspector, {\r\n            deep: true,\r\n        });\r\n        if (!form) {\r\n            registerSingleFieldWithDevtools(field);\r\n        }\r\n    }\r\n    // if no associated form return the field API immediately\r\n    if (!form) {\r\n        return field;\r\n    }\r\n    // associate the field with the given form\r\n    form.register(field);\r\n    onBeforeUnmount(() => {\r\n        markedForRemoval = true;\r\n        form.unregister(field);\r\n    });\r\n    // extract cross-field dependencies in a computed prop\r\n    const dependencies = computed(() => {\r\n        const rulesVal = normalizedRules.value;\r\n        // is falsy, a function schema or a yup schema\r\n        if (!rulesVal || isCallable(rulesVal) || isYupValidator(rulesVal) || Array.isArray(rulesVal)) {\r\n            return {};\r\n        }\r\n        return Object.keys(rulesVal).reduce((acc, rule) => {\r\n            const deps = extractLocators(rulesVal[rule])\r\n                .map((dep) => dep.__locatorRef)\r\n                .reduce((depAcc, depName) => {\r\n                const depValue = getFromPath(form.values, depName) || form.values[depName];\r\n                if (depValue !== undefined) {\r\n                    depAcc[depName] = depValue;\r\n                }\r\n                return depAcc;\r\n            }, {});\r\n            Object.assign(acc, deps);\r\n            return acc;\r\n        }, {});\r\n    });\r\n    // Adds a watcher that runs the validation whenever field dependencies change\r\n    watch(dependencies, (deps, oldDeps) => {\r\n        // Skip if no dependencies or if the field wasn't manipulated\r\n        if (!Object.keys(deps).length) {\r\n            return;\r\n        }\r\n        const shouldValidate = !es6(deps, oldDeps);\r\n        if (shouldValidate) {\r\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\r\n        }\r\n    });\r\n    return field;\r\n}\r\n/**\r\n * Normalizes partial field options to include the full options\r\n */\r\nfunction normalizeOptions(name, opts) {\r\n    const defaults = () => ({\r\n        initialValue: undefined,\r\n        validateOnMount: false,\r\n        bails: true,\r\n        rules: '',\r\n        label: name,\r\n        validateOnValueUpdate: true,\r\n        standalone: false,\r\n        keepValueOnUnmount: undefined,\r\n        modelPropName: 'modelValue',\r\n        syncVModel: true,\r\n    });\r\n    if (!opts) {\r\n        return defaults();\r\n    }\r\n    // TODO: Deprecate this in next major release\r\n    const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\r\n    return Object.assign(Object.assign(Object.assign({}, defaults()), (opts || {})), { checkedValue });\r\n}\r\n/**\r\n * Extracts the validation rules from a schema\r\n */\r\nfunction extractRuleFromSchema(schema, fieldName) {\r\n    // no schema at all\r\n    if (!schema) {\r\n        return undefined;\r\n    }\r\n    // there is a key on the schema object for this field\r\n    return schema[fieldName];\r\n}\r\nfunction useCheckboxField(name, rules, opts) {\r\n    const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\r\n    const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\r\n    const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\r\n    function patchCheckboxApi(field) {\r\n        const handleChange = field.handleChange;\r\n        const checked = computed(() => {\r\n            const currentValue = unref(field.value);\r\n            const checkedVal = unref(checkedValue);\r\n            return Array.isArray(currentValue) ? currentValue.includes(checkedVal) : checkedVal === currentValue;\r\n        });\r\n        function handleCheckboxChange(e, shouldValidate = true) {\r\n            var _a;\r\n            if (checked.value === ((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.checked)) {\r\n                return;\r\n            }\r\n            let newValue = normalizeEventValue(e);\r\n            // Single checkbox field without a form to toggle it's value\r\n            if (!form) {\r\n                newValue = resolveNextCheckboxValue(unref(field.value), unref(checkedValue), unref(uncheckedValue));\r\n            }\r\n            handleChange(newValue, shouldValidate);\r\n        }\r\n        onBeforeUnmount(() => {\r\n            var _a, _b;\r\n            const shouldKeepValue = (_b = (_a = unref(field.keepValueOnUnmount)) !== null && _a !== void 0 ? _a : unref(form === null || form === void 0 ? void 0 : form.keepValuesOnUnmount)) !== null && _b !== void 0 ? _b : false;\r\n            // toggles the checkbox value if it was checked and the unset behavior is set\r\n            if (checked.value && !shouldKeepValue) {\r\n                handleCheckboxChange(unref(checkedValue), false);\r\n            }\r\n        });\r\n        return Object.assign(Object.assign({}, field), { checked,\r\n            checkedValue,\r\n            uncheckedValue, handleChange: handleCheckboxChange });\r\n    }\r\n    return patchCheckboxApi(_useField(name, rules, opts));\r\n}\r\nfunction useVModel({ prop, value, handleChange }) {\r\n    const vm = getCurrentInstance();\r\n    /* istanbul ignore next */\r\n    if (!vm) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            console.warn('Failed to setup model events because `useField` was not called in setup.');\r\n        }\r\n        return;\r\n    }\r\n    const propName = prop || 'modelValue';\r\n    const emitName = `update:${propName}`;\r\n    // Component doesn't have a model prop setup (must be defined on the props)\r\n    if (!(propName in vm.props)) {\r\n        return;\r\n    }\r\n    watch(value, newValue => {\r\n        if (es6(newValue, getCurrentModelValue(vm, propName))) {\r\n            return;\r\n        }\r\n        vm.emit(emitName, newValue);\r\n    });\r\n    watch(() => getCurrentModelValue(vm, propName), propValue => {\r\n        if (propValue === IS_ABSENT && value.value === undefined) {\r\n            return;\r\n        }\r\n        const newValue = propValue === IS_ABSENT ? undefined : propValue;\r\n        if (es6(newValue, applyModelModifiers(value.value, vm.props.modelModifiers))) {\r\n            return;\r\n        }\r\n        handleChange(newValue);\r\n    });\r\n}\r\nfunction getCurrentModelValue(vm, propName) {\r\n    return vm.props[propName];\r\n}\n\nconst FieldImpl = defineComponent({\r\n    name: 'Field',\r\n    inheritAttrs: false,\r\n    props: {\r\n        as: {\r\n            type: [String, Object],\r\n            default: undefined,\r\n        },\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        rules: {\r\n            type: [Object, String, Function],\r\n            default: undefined,\r\n        },\r\n        validateOnMount: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        validateOnBlur: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnChange: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnInput: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnModelUpdate: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        bails: {\r\n            type: Boolean,\r\n            default: () => getConfig().bails,\r\n        },\r\n        label: {\r\n            type: String,\r\n            default: undefined,\r\n        },\r\n        uncheckedValue: {\r\n            type: null,\r\n            default: undefined,\r\n        },\r\n        modelValue: {\r\n            type: null,\r\n            default: IS_ABSENT,\r\n        },\r\n        modelModifiers: {\r\n            type: null,\r\n            default: () => ({}),\r\n        },\r\n        'onUpdate:modelValue': {\r\n            type: null,\r\n            default: undefined,\r\n        },\r\n        standalone: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        keepValue: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const rules = toRef(props, 'rules');\r\n        const name = toRef(props, 'name');\r\n        const label = toRef(props, 'label');\r\n        const uncheckedValue = toRef(props, 'uncheckedValue');\r\n        const keepValue = toRef(props, 'keepValue');\r\n        const { errors, value, errorMessage, validate: validateField, handleChange, handleBlur, setTouched, resetField, handleReset, meta, checked, setErrors, } = useField(name, rules, {\r\n            validateOnMount: props.validateOnMount,\r\n            bails: props.bails,\r\n            standalone: props.standalone,\r\n            type: ctx.attrs.type,\r\n            initialValue: resolveInitialValue(props, ctx),\r\n            // Only for checkboxes and radio buttons\r\n            checkedValue: ctx.attrs.value,\r\n            uncheckedValue,\r\n            label,\r\n            validateOnValueUpdate: false,\r\n            keepValueOnUnmount: keepValue,\r\n        });\r\n        // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\r\n        const onChangeHandler = function handleChangeWithModel(e, shouldValidate = true) {\r\n            handleChange(e, shouldValidate);\r\n            ctx.emit('update:modelValue', value.value);\r\n        };\r\n        const handleInput = (e) => {\r\n            if (!hasCheckedAttr(ctx.attrs.type)) {\r\n                value.value = normalizeEventValue(e);\r\n            }\r\n        };\r\n        const onInputHandler = function handleInputWithModel(e) {\r\n            handleInput(e);\r\n            ctx.emit('update:modelValue', value.value);\r\n        };\r\n        const fieldProps = computed(() => {\r\n            const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = resolveValidationTriggers(props);\r\n            const baseOnBlur = [handleBlur, ctx.attrs.onBlur, validateOnBlur ? validateField : undefined].filter(Boolean);\r\n            const baseOnInput = [(e) => onChangeHandler(e, validateOnInput), ctx.attrs.onInput].filter(Boolean);\r\n            const baseOnChange = [(e) => onChangeHandler(e, validateOnChange), ctx.attrs.onChange].filter(Boolean);\r\n            const attrs = {\r\n                name: props.name,\r\n                onBlur: baseOnBlur,\r\n                onInput: baseOnInput,\r\n                onChange: baseOnChange,\r\n            };\r\n            attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\r\n            if (hasCheckedAttr(ctx.attrs.type) && checked) {\r\n                attrs.checked = checked.value;\r\n            }\r\n            const tag = resolveTag(props, ctx);\r\n            if (shouldHaveValueBinding(tag, ctx.attrs)) {\r\n                attrs.value = value.value;\r\n            }\r\n            return attrs;\r\n        });\r\n        function slotProps() {\r\n            return {\r\n                field: fieldProps.value,\r\n                value: value.value,\r\n                meta,\r\n                errors: errors.value,\r\n                errorMessage: errorMessage.value,\r\n                validate: validateField,\r\n                resetField,\r\n                handleChange: onChangeHandler,\r\n                handleInput: onInputHandler,\r\n                handleReset,\r\n                handleBlur,\r\n                setTouched,\r\n                setErrors,\r\n            };\r\n        }\r\n        ctx.expose({\r\n            setErrors,\r\n            setTouched,\r\n            reset: resetField,\r\n            validate: validateField,\r\n            handleChange,\r\n        });\r\n        return () => {\r\n            const tag = resolveDynamicComponent(resolveTag(props, ctx));\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            if (tag) {\r\n                return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\r\n            }\r\n            return children;\r\n        };\r\n    },\r\n});\r\nfunction resolveTag(props, ctx) {\r\n    let tag = props.as || '';\r\n    if (!props.as && !ctx.slots.default) {\r\n        tag = 'input';\r\n    }\r\n    return tag;\r\n}\r\nfunction resolveValidationTriggers(props) {\r\n    var _a, _b, _c, _d;\r\n    const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = getConfig();\r\n    return {\r\n        validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\r\n        validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\r\n        validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\r\n        validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate,\r\n    };\r\n}\r\nfunction resolveInitialValue(props, ctx) {\r\n    // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\r\n    // For checkboxes and radio buttons it will always be the model value not the `value` attribute\r\n    if (!hasCheckedAttr(ctx.attrs.type)) {\r\n        return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\r\n    }\r\n    return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\r\n}\r\nconst Field = FieldImpl;\n\nlet FORM_COUNTER = 0;\r\nfunction useForm(opts) {\r\n    var _a;\r\n    const formId = FORM_COUNTER++;\r\n    // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\r\n    // TODO: This won't be needed if we centralize all the state inside the `form` for form inputs\r\n    let RESET_LOCK = false;\r\n    // A lookup containing fields or field groups\r\n    const fieldsByPath = ref({});\r\n    // If the form is currently submitting\r\n    const isSubmitting = ref(false);\r\n    // The number of times the user tried to submit the form\r\n    const submitCount = ref(0);\r\n    // field arrays managed by this form\r\n    const fieldArrays = [];\r\n    // a private ref for all form values\r\n    const formValues = reactive(klona(unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {}));\r\n    // the source of errors for the form fields\r\n    const { errorBag, setErrorBag, setFieldErrorBag } = useErrorBag(opts === null || opts === void 0 ? void 0 : opts.initialErrors);\r\n    // Gets the first error of each field\r\n    const errors = computed(() => {\r\n        return keysOf(errorBag.value).reduce((acc, key) => {\r\n            const bag = errorBag.value[key];\r\n            if (bag && bag.length) {\r\n                acc[key] = bag[0];\r\n            }\r\n            return acc;\r\n        }, {});\r\n    });\r\n    function getFirstFieldAtPath(path) {\r\n        const fieldOrGroup = fieldsByPath.value[path];\r\n        return Array.isArray(fieldOrGroup) ? fieldOrGroup[0] : fieldOrGroup;\r\n    }\r\n    function fieldExists(path) {\r\n        return !!fieldsByPath.value[path];\r\n    }\r\n    /**\r\n     * Holds a computed reference to all fields names and labels\r\n     */\r\n    const fieldNames = computed(() => {\r\n        return keysOf(fieldsByPath.value).reduce((names, path) => {\r\n            const field = getFirstFieldAtPath(path);\r\n            if (field) {\r\n                names[path] = unref(field.label || field.name) || '';\r\n            }\r\n            return names;\r\n        }, {});\r\n    });\r\n    const fieldBailsMap = computed(() => {\r\n        return keysOf(fieldsByPath.value).reduce((map, path) => {\r\n            var _a;\r\n            const field = getFirstFieldAtPath(path);\r\n            if (field) {\r\n                map[path] = (_a = field.bails) !== null && _a !== void 0 ? _a : true;\r\n            }\r\n            return map;\r\n        }, {});\r\n    });\r\n    // mutable non-reactive reference to initial errors\r\n    // we need this to process initial errors then unset them\r\n    const initialErrors = Object.assign({}, ((opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {}));\r\n    const keepValuesOnUnmount = (_a = opts === null || opts === void 0 ? void 0 : opts.keepValuesOnUnmount) !== null && _a !== void 0 ? _a : false;\r\n    // initial form values\r\n    const { initialValues, originalInitialValues, setInitialValues } = useFormInitialValues(fieldsByPath, formValues, opts === null || opts === void 0 ? void 0 : opts.initialValues);\r\n    // form meta aggregations\r\n    const meta = useFormMeta(fieldsByPath, formValues, originalInitialValues, errors);\r\n    const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\r\n    const formCtx = {\r\n        formId,\r\n        fieldsByPath,\r\n        values: formValues,\r\n        errorBag,\r\n        errors,\r\n        schema,\r\n        submitCount,\r\n        meta,\r\n        isSubmitting,\r\n        fieldArrays,\r\n        keepValuesOnUnmount,\r\n        validateSchema: unref(schema) ? validateSchema : undefined,\r\n        validate,\r\n        register: registerField,\r\n        unregister: unregisterField,\r\n        setFieldErrorBag,\r\n        validateField,\r\n        setFieldValue,\r\n        setValues,\r\n        setErrors,\r\n        setFieldError,\r\n        setFieldTouched,\r\n        setTouched,\r\n        resetForm,\r\n        handleSubmit,\r\n        stageInitialValue,\r\n        unsetInitialValue,\r\n        setFieldInitialValue,\r\n        useFieldModel,\r\n    };\r\n    function isFieldGroup(fieldOrGroup) {\r\n        return Array.isArray(fieldOrGroup);\r\n    }\r\n    function applyFieldMutation(fieldOrGroup, mutation) {\r\n        if (Array.isArray(fieldOrGroup)) {\r\n            return fieldOrGroup.forEach(mutation);\r\n        }\r\n        return mutation(fieldOrGroup);\r\n    }\r\n    function mutateAllFields(mutation) {\r\n        Object.values(fieldsByPath.value).forEach(field => {\r\n            if (!field) {\r\n                return;\r\n            }\r\n            // avoid resetting the field values, because they should've been reset already.\r\n            applyFieldMutation(field, mutation);\r\n        });\r\n    }\r\n    /**\r\n     * Manually sets an error message on a specific field\r\n     */\r\n    function setFieldError(field, message) {\r\n        setFieldErrorBag(field, message);\r\n    }\r\n    /**\r\n     * Sets errors for the fields specified in the object\r\n     */\r\n    function setErrors(fields) {\r\n        setErrorBag(fields);\r\n    }\r\n    /**\r\n     * Sets a single field value\r\n     */\r\n    function setFieldValue(field, value, { force } = { force: false }) {\r\n        var _a;\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        const clonedValue = klona(value);\r\n        // field wasn't found, create a virtual field as a placeholder\r\n        if (!fieldInstance) {\r\n            setInPath(formValues, field, clonedValue);\r\n            return;\r\n        }\r\n        if (isFieldGroup(fieldInstance) && ((_a = fieldInstance[0]) === null || _a === void 0 ? void 0 : _a.type) === 'checkbox' && !Array.isArray(value)) {\r\n            // Multiple checkboxes, and only one of them got updated\r\n            const newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field) || [], value, undefined));\r\n            setInPath(formValues, field, newValue);\r\n            return;\r\n        }\r\n        let newValue = value;\r\n        // Single Checkbox: toggles the field value unless the field is being reset then force it\r\n        if (!isFieldGroup(fieldInstance) && fieldInstance.type === 'checkbox' && !force && !RESET_LOCK) {\r\n            newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field), value, unref(fieldInstance.uncheckedValue)));\r\n        }\r\n        setInPath(formValues, field, newValue);\r\n    }\r\n    /**\r\n     * Sets multiple fields values\r\n     */\r\n    function setValues(fields) {\r\n        // clean up old values\r\n        keysOf(formValues).forEach(key => {\r\n            delete formValues[key];\r\n        });\r\n        // set up new values\r\n        keysOf(fields).forEach(path => {\r\n            setFieldValue(path, fields[path]);\r\n        });\r\n        // regenerate the arrays when the form values change\r\n        fieldArrays.forEach(f => f && f.reset());\r\n    }\r\n    function createModel(path) {\r\n        const { value } = _useFieldValue(path);\r\n        watch(value, () => {\r\n            if (!fieldExists(unref(path))) {\r\n                validate({ mode: 'validated-only' });\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    function useFieldModel(path) {\r\n        if (!Array.isArray(path)) {\r\n            return createModel(path);\r\n        }\r\n        return path.map(createModel);\r\n    }\r\n    /**\r\n     * Sets the touched meta state on a field\r\n     */\r\n    function setFieldTouched(field, isTouched) {\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        if (fieldInstance) {\r\n            applyFieldMutation(fieldInstance, f => f.setTouched(isTouched));\r\n        }\r\n    }\r\n    /**\r\n     * Sets the touched meta state on multiple fields\r\n     */\r\n    function setTouched(fields) {\r\n        keysOf(fields).forEach(field => {\r\n            setFieldTouched(field, !!fields[field]);\r\n        });\r\n    }\r\n    /**\r\n     * Resets all fields\r\n     */\r\n    function resetForm(state) {\r\n        RESET_LOCK = true;\r\n        // set initial values if provided\r\n        if (state === null || state === void 0 ? void 0 : state.values) {\r\n            setInitialValues(state.values);\r\n            setValues(state === null || state === void 0 ? void 0 : state.values);\r\n        }\r\n        else {\r\n            // clean up the initial values back to the original\r\n            setInitialValues(originalInitialValues.value);\r\n            // otherwise clean the current values\r\n            setValues(originalInitialValues.value);\r\n        }\r\n        // avoid resetting the field values, because they should've been reset already.\r\n        mutateAllFields(f => f.resetField());\r\n        if (state === null || state === void 0 ? void 0 : state.touched) {\r\n            setTouched(state.touched);\r\n        }\r\n        setErrors((state === null || state === void 0 ? void 0 : state.errors) || {});\r\n        submitCount.value = (state === null || state === void 0 ? void 0 : state.submitCount) || 0;\r\n        nextTick(() => {\r\n            RESET_LOCK = false;\r\n        });\r\n    }\r\n    function insertFieldAtPath(field, path) {\r\n        const rawField = markRaw(field);\r\n        const fieldPath = path;\r\n        // first field at that path\r\n        if (!fieldsByPath.value[fieldPath]) {\r\n            fieldsByPath.value[fieldPath] = rawField;\r\n            return;\r\n        }\r\n        const fieldAtPath = fieldsByPath.value[fieldPath];\r\n        if (fieldAtPath && !Array.isArray(fieldAtPath)) {\r\n            fieldsByPath.value[fieldPath] = [fieldAtPath];\r\n        }\r\n        // add the new array to that path\r\n        fieldsByPath.value[fieldPath] = [...fieldsByPath.value[fieldPath], rawField];\r\n    }\r\n    function removeFieldFromPath(field, path) {\r\n        const fieldPath = path;\r\n        const fieldAtPath = fieldsByPath.value[fieldPath];\r\n        if (!fieldAtPath) {\r\n            return;\r\n        }\r\n        // same field at path\r\n        if (!isFieldGroup(fieldAtPath) && field.id === fieldAtPath.id) {\r\n            delete fieldsByPath.value[fieldPath];\r\n            return;\r\n        }\r\n        if (isFieldGroup(fieldAtPath)) {\r\n            const idx = fieldAtPath.findIndex(f => f.id === field.id);\r\n            if (idx === -1) {\r\n                return;\r\n            }\r\n            fieldAtPath.splice(idx, 1);\r\n            if (fieldAtPath.length === 1) {\r\n                fieldsByPath.value[fieldPath] = fieldAtPath[0];\r\n                return;\r\n            }\r\n            if (!fieldAtPath.length) {\r\n                delete fieldsByPath.value[fieldPath];\r\n            }\r\n        }\r\n    }\r\n    function registerField(field) {\r\n        const fieldPath = unref(field.name);\r\n        insertFieldAtPath(field, fieldPath);\r\n        if (isRef(field.name)) {\r\n            // ensures when a field's name was already taken that it preserves its same value\r\n            // necessary for fields generated by loops\r\n            watch(field.name, async (newPath, oldPath) => {\r\n                // cache the value\r\n                await nextTick();\r\n                removeFieldFromPath(field, oldPath);\r\n                insertFieldAtPath(field, newPath);\r\n                // re-validate if either path had errors before\r\n                if (errors.value[oldPath] || errors.value[newPath]) {\r\n                    // clear up both paths errors\r\n                    setFieldError(oldPath, undefined);\r\n                    validateField(newPath);\r\n                }\r\n                // clean up the old path if no other field is sharing that name\r\n                // #3325\r\n                await nextTick();\r\n                if (!fieldExists(oldPath)) {\r\n                    unsetPath(formValues, oldPath);\r\n                }\r\n            });\r\n        }\r\n        // if field already had errors (initial errors) that's not user-set, validate it again to ensure state is correct\r\n        // the difference being that `initialErrors` will contain the error message while other errors (pre-validated schema) won't have them as initial errors\r\n        // #3342\r\n        const initialErrorMessage = unref(field.errorMessage);\r\n        if (initialErrorMessage && (initialErrors === null || initialErrors === void 0 ? void 0 : initialErrors[fieldPath]) !== initialErrorMessage) {\r\n            validateField(fieldPath);\r\n        }\r\n        // marks the initial error as \"consumed\" so it won't be matched later with same non-initial error\r\n        delete initialErrors[fieldPath];\r\n    }\r\n    function unregisterField(field) {\r\n        const fieldName = unref(field.name);\r\n        const fieldInstance = fieldsByPath.value[fieldName];\r\n        const isGroup = !!fieldInstance && isFieldGroup(fieldInstance);\r\n        removeFieldFromPath(field, fieldName);\r\n        nextTick(() => {\r\n            var _a;\r\n            // clears a field error on unmounted\r\n            // we wait till next tick to make sure if the field is completely removed and doesn't have any siblings like checkboxes\r\n            // #3384\r\n            if (!fieldExists(fieldName)) {\r\n                setFieldError(fieldName, undefined);\r\n                // Checks if the field was configured to be unset during unmount or not\r\n                // Checks both the form-level config and field-level one\r\n                // Field has the priority if it is set, otherwise it goes to the form settings\r\n                const shouldKeepValue = (_a = unref(field.keepValueOnUnmount)) !== null && _a !== void 0 ? _a : unref(keepValuesOnUnmount);\r\n                if (shouldKeepValue) {\r\n                    return;\r\n                }\r\n                if (isGroup && !isEmptyContainer(getFromPath(formValues, fieldName))) {\r\n                    return;\r\n                }\r\n                unsetPath(formValues, fieldName);\r\n            }\r\n        });\r\n    }\r\n    async function validate(opts) {\r\n        mutateAllFields(f => (f.meta.validated = true));\r\n        if (formCtx.validateSchema) {\r\n            return formCtx.validateSchema((opts === null || opts === void 0 ? void 0 : opts.mode) || 'force');\r\n        }\r\n        // No schema, each field is responsible to validate itself\r\n        const validations = await Promise.all(Object.values(fieldsByPath.value).map(field => {\r\n            const fieldInstance = Array.isArray(field) ? field[0] : field;\r\n            if (!fieldInstance) {\r\n                return Promise.resolve({ key: '', valid: true, errors: [] });\r\n            }\r\n            return fieldInstance.validate(opts).then((result) => {\r\n                return {\r\n                    key: unref(fieldInstance.name),\r\n                    valid: result.valid,\r\n                    errors: result.errors,\r\n                };\r\n            });\r\n        }));\r\n        const results = {};\r\n        const errors = {};\r\n        for (const validation of validations) {\r\n            results[validation.key] = {\r\n                valid: validation.valid,\r\n                errors: validation.errors,\r\n            };\r\n            if (validation.errors.length) {\r\n                errors[validation.key] = validation.errors[0];\r\n            }\r\n        }\r\n        return {\r\n            valid: validations.every(r => r.valid),\r\n            results,\r\n            errors,\r\n        };\r\n    }\r\n    async function validateField(field) {\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        if (!fieldInstance) {\r\n            warn$1(`field with name ${field} was not found`);\r\n            return Promise.resolve({ errors: [], valid: true });\r\n        }\r\n        if (Array.isArray(fieldInstance)) {\r\n            return fieldInstance.map(f => f.validate())[0];\r\n        }\r\n        return fieldInstance.validate();\r\n    }\r\n    function handleSubmit(fn, onValidationError) {\r\n        return function submissionHandler(e) {\r\n            if (e instanceof Event) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            }\r\n            // Touch all fields\r\n            setTouched(keysOf(fieldsByPath.value).reduce((acc, field) => {\r\n                acc[field] = true;\r\n                return acc;\r\n            }, {}));\r\n            isSubmitting.value = true;\r\n            submitCount.value++;\r\n            return validate()\r\n                .then(result => {\r\n                if (result.valid && typeof fn === 'function') {\r\n                    return fn(klona(formValues), {\r\n                        evt: e,\r\n                        setErrors,\r\n                        setFieldError,\r\n                        setTouched,\r\n                        setFieldTouched,\r\n                        setValues,\r\n                        setFieldValue,\r\n                        resetForm,\r\n                    });\r\n                }\r\n                if (!result.valid && typeof onValidationError === 'function') {\r\n                    onValidationError({\r\n                        values: klona(formValues),\r\n                        evt: e,\r\n                        errors: result.errors,\r\n                        results: result.results,\r\n                    });\r\n                }\r\n            })\r\n                .then(returnVal => {\r\n                isSubmitting.value = false;\r\n                return returnVal;\r\n            }, err => {\r\n                isSubmitting.value = false;\r\n                // re-throw the err so it doesn't go silent\r\n                throw err;\r\n            });\r\n        };\r\n    }\r\n    function setFieldInitialValue(path, value) {\r\n        setInPath(initialValues.value, path, klona(value));\r\n    }\r\n    function unsetInitialValue(path) {\r\n        unsetPath(initialValues.value, path);\r\n    }\r\n    /**\r\n     * Sneaky function to set initial field values\r\n     */\r\n    function stageInitialValue(path, value, updateOriginal = false) {\r\n        setInPath(formValues, path, value);\r\n        setFieldInitialValue(path, value);\r\n        if (updateOriginal) {\r\n            setInPath(originalInitialValues.value, path, klona(value));\r\n        }\r\n    }\r\n    async function _validateSchema() {\r\n        const schemaValue = unref(schema);\r\n        if (!schemaValue) {\r\n            return { valid: true, results: {}, errors: {} };\r\n        }\r\n        const formResult = isYupValidator(schemaValue)\r\n            ? await validateYupSchema(schemaValue, formValues)\r\n            : await validateObjectSchema(schemaValue, formValues, {\r\n                names: fieldNames.value,\r\n                bailsMap: fieldBailsMap.value,\r\n            });\r\n        return formResult;\r\n    }\r\n    /**\r\n     * Batches validation runs in 5ms batches\r\n     * Must have two distinct batch queues to make sure they don't override each other settings #3783\r\n     */\r\n    const debouncedSilentValidation = debounceAsync(_validateSchema, 5);\r\n    const debouncedValidation = debounceAsync(_validateSchema, 5);\r\n    async function validateSchema(mode) {\r\n        const formResult = await (mode === 'silent' ? debouncedSilentValidation() : debouncedValidation());\r\n        // fields by id lookup\r\n        const fieldsById = formCtx.fieldsByPath.value || {};\r\n        // errors fields names, we need it to also check if custom errors are updated\r\n        const currentErrorsPaths = keysOf(formCtx.errorBag.value);\r\n        // collect all the keys from the schema and all fields\r\n        // this ensures we have a complete keymap of all the fields\r\n        const paths = [\r\n            ...new Set([...keysOf(formResult.results), ...keysOf(fieldsById), ...currentErrorsPaths]),\r\n        ];\r\n        // aggregates the paths into a single result object while applying the results on the fields\r\n        return paths.reduce((validation, path) => {\r\n            const field = fieldsById[path];\r\n            const messages = (formResult.results[path] || { errors: [] }).errors;\r\n            const fieldResult = {\r\n                errors: messages,\r\n                valid: !messages.length,\r\n            };\r\n            validation.results[path] = fieldResult;\r\n            if (!fieldResult.valid) {\r\n                validation.errors[path] = fieldResult.errors[0];\r\n            }\r\n            // field not rendered\r\n            if (!field) {\r\n                setFieldError(path, messages);\r\n                return validation;\r\n            }\r\n            // always update the valid flag regardless of the mode\r\n            applyFieldMutation(field, f => (f.meta.valid = fieldResult.valid));\r\n            if (mode === 'silent') {\r\n                return validation;\r\n            }\r\n            const wasValidated = Array.isArray(field) ? field.some(f => f.meta.validated) : field.meta.validated;\r\n            if (mode === 'validated-only' && !wasValidated) {\r\n                return validation;\r\n            }\r\n            applyFieldMutation(field, f => f.setState({ errors: fieldResult.errors }));\r\n            return validation;\r\n        }, { valid: formResult.valid, results: {}, errors: {} });\r\n    }\r\n    const submitForm = handleSubmit((_, { evt }) => {\r\n        if (isFormSubmitEvent(evt)) {\r\n            evt.target.submit();\r\n        }\r\n    });\r\n    // Trigger initial validation\r\n    onMounted(() => {\r\n        if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\r\n            setErrors(opts.initialErrors);\r\n        }\r\n        if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\r\n            setTouched(opts.initialTouched);\r\n        }\r\n        // if validate on mount was enabled\r\n        if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\r\n            validate();\r\n            return;\r\n        }\r\n        // otherwise run initial silent validation through schema if available\r\n        // the useField should skip their own silent validation if a yup schema is present\r\n        if (formCtx.validateSchema) {\r\n            formCtx.validateSchema('silent');\r\n        }\r\n    });\r\n    if (isRef(schema)) {\r\n        watch(schema, () => {\r\n            var _a;\r\n            (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\r\n        });\r\n    }\r\n    // Provide injections\r\n    provide(FormContextKey, formCtx);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        registerFormWithDevTools(formCtx);\r\n        watch(() => (Object.assign(Object.assign({ errors: errorBag.value }, meta.value), { values: formValues, isSubmitting: isSubmitting.value, submitCount: submitCount.value })), refreshInspector, {\r\n            deep: true,\r\n        });\r\n    }\r\n    return {\r\n        errors,\r\n        meta,\r\n        values: formValues,\r\n        isSubmitting,\r\n        submitCount,\r\n        validate,\r\n        validateField,\r\n        handleReset: () => resetForm(),\r\n        resetForm,\r\n        handleSubmit,\r\n        submitForm,\r\n        setFieldError,\r\n        setErrors,\r\n        setFieldValue,\r\n        setValues,\r\n        setFieldTouched,\r\n        setTouched,\r\n        useFieldModel,\r\n    };\r\n}\r\n/**\r\n * Manages form meta aggregation\r\n */\r\nfunction useFormMeta(fieldsByPath, currentValues, initialValues, errors) {\r\n    const MERGE_STRATEGIES = {\r\n        touched: 'some',\r\n        pending: 'some',\r\n        valid: 'every',\r\n    };\r\n    const isDirty = computed(() => {\r\n        return !es6(currentValues, unref(initialValues));\r\n    });\r\n    function calculateFlags() {\r\n        const fields = Object.values(fieldsByPath.value).flat(1).filter(Boolean);\r\n        return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\r\n            const mergeMethod = MERGE_STRATEGIES[flag];\r\n            acc[flag] = fields[mergeMethod](field => field.meta[flag]);\r\n            return acc;\r\n        }, {});\r\n    }\r\n    const flags = reactive(calculateFlags());\r\n    watchEffect(() => {\r\n        const value = calculateFlags();\r\n        flags.touched = value.touched;\r\n        flags.valid = value.valid;\r\n        flags.pending = value.pending;\r\n    });\r\n    return computed(() => {\r\n        return Object.assign(Object.assign({ initialValues: unref(initialValues) }, flags), { valid: flags.valid && !keysOf(errors.value).length, dirty: isDirty.value });\r\n    });\r\n}\r\n/**\r\n * Manages the initial values prop\r\n */\r\nfunction useFormInitialValues(fields, formValues, providedValues) {\r\n    // these are the mutable initial values as the fields are mounted/unmounted\r\n    const initialValues = ref(klona(unref(providedValues)) || {});\r\n    // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\r\n    // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\r\n    // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\r\n    // so these are the values that the reset function should use\r\n    // these only change when the user explicitly chanegs the initial values or when the user resets them with new values.\r\n    const originalInitialValues = ref(klona(unref(providedValues)) || {});\r\n    function setInitialValues(values, updateFields = false) {\r\n        initialValues.value = klona(values);\r\n        originalInitialValues.value = klona(values);\r\n        if (!updateFields) {\r\n            return;\r\n        }\r\n        // update the pristine non-touched fields\r\n        // those are excluded because it's unlikely you want to change the form values using initial values\r\n        // we mostly watch them for API population or newly inserted fields\r\n        // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\r\n        keysOf(fields.value).forEach(fieldPath => {\r\n            const field = fields.value[fieldPath];\r\n            const wasTouched = Array.isArray(field) ? field.some(f => f.meta.touched) : field === null || field === void 0 ? void 0 : field.meta.touched;\r\n            if (!field || wasTouched) {\r\n                return;\r\n            }\r\n            const newValue = getFromPath(initialValues.value, fieldPath);\r\n            setInPath(formValues, fieldPath, klona(newValue));\r\n        });\r\n    }\r\n    if (isRef(providedValues)) {\r\n        watch(providedValues, value => {\r\n            setInitialValues(value, true);\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    return {\r\n        initialValues,\r\n        originalInitialValues,\r\n        setInitialValues,\r\n    };\r\n}\r\nfunction useErrorBag(initialErrors) {\r\n    const errorBag = ref({});\r\n    function normalizeErrorItem(message) {\r\n        return Array.isArray(message) ? message : message ? [message] : [];\r\n    }\r\n    /**\r\n     * Manually sets an error message on a specific field\r\n     */\r\n    function setFieldErrorBag(field, message) {\r\n        if (!message) {\r\n            delete errorBag.value[field];\r\n            return;\r\n        }\r\n        errorBag.value[field] = normalizeErrorItem(message);\r\n    }\r\n    /**\r\n     * Sets errors for the fields specified in the object\r\n     */\r\n    function setErrorBag(fields) {\r\n        errorBag.value = keysOf(fields).reduce((acc, key) => {\r\n            const message = fields[key];\r\n            if (message) {\r\n                acc[key] = normalizeErrorItem(message);\r\n            }\r\n            return acc;\r\n        }, {});\r\n    }\r\n    if (initialErrors) {\r\n        setErrorBag(initialErrors);\r\n    }\r\n    return {\r\n        errorBag,\r\n        setErrorBag,\r\n        setFieldErrorBag,\r\n    };\r\n}\n\nconst FormImpl = defineComponent({\r\n    name: 'Form',\r\n    inheritAttrs: false,\r\n    props: {\r\n        as: {\r\n            type: String,\r\n            default: 'form',\r\n        },\r\n        validationSchema: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialValues: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialErrors: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialTouched: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        validateOnMount: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        onSubmit: {\r\n            type: Function,\r\n            default: undefined,\r\n        },\r\n        onInvalidSubmit: {\r\n            type: Function,\r\n            default: undefined,\r\n        },\r\n        keepValues: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const initialValues = toRef(props, 'initialValues');\r\n        const validationSchema = toRef(props, 'validationSchema');\r\n        const keepValues = toRef(props, 'keepValues');\r\n        const { errors, values, meta, isSubmitting, submitCount, validate, validateField, handleReset, resetForm, handleSubmit, setErrors, setFieldError, setFieldValue, setValues, setFieldTouched, setTouched, } = useForm({\r\n            validationSchema: validationSchema.value ? validationSchema : undefined,\r\n            initialValues,\r\n            initialErrors: props.initialErrors,\r\n            initialTouched: props.initialTouched,\r\n            validateOnMount: props.validateOnMount,\r\n            keepValuesOnUnmount: keepValues,\r\n        });\r\n        const submitForm = handleSubmit((_, { evt }) => {\r\n            if (isFormSubmitEvent(evt)) {\r\n                evt.target.submit();\r\n            }\r\n        }, props.onInvalidSubmit);\r\n        const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\r\n        function handleFormReset(e) {\r\n            if (isEvent(e)) {\r\n                // Prevent default form reset behavior\r\n                e.preventDefault();\r\n            }\r\n            handleReset();\r\n            if (typeof ctx.attrs.onReset === 'function') {\r\n                ctx.attrs.onReset();\r\n            }\r\n        }\r\n        function handleScopedSlotSubmit(evt, onSubmit) {\r\n            const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\r\n            return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\r\n        }\r\n        function slotProps() {\r\n            return {\r\n                meta: meta.value,\r\n                errors: errors.value,\r\n                values: values,\r\n                isSubmitting: isSubmitting.value,\r\n                submitCount: submitCount.value,\r\n                validate,\r\n                validateField,\r\n                handleSubmit: handleScopedSlotSubmit,\r\n                handleReset,\r\n                submitForm,\r\n                setErrors,\r\n                setFieldError,\r\n                setFieldValue,\r\n                setValues,\r\n                setFieldTouched,\r\n                setTouched,\r\n                resetForm,\r\n            };\r\n        }\r\n        // expose these functions and methods as part of public API\r\n        ctx.expose({\r\n            setFieldError,\r\n            setErrors,\r\n            setFieldValue,\r\n            setValues,\r\n            setFieldTouched,\r\n            setTouched,\r\n            resetForm,\r\n            validate,\r\n            validateField,\r\n        });\r\n        return function renderForm() {\r\n            // avoid resolving the form component as itself\r\n            const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            if (!props.as) {\r\n                return children;\r\n            }\r\n            // Attributes to add on a native `form` tag\r\n            const formAttrs = props.as === 'form'\r\n                ? {\r\n                    // Disables native validation as vee-validate will handle it.\r\n                    novalidate: true,\r\n                }\r\n                : {};\r\n            return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), { onSubmit, onReset: handleFormReset }), children);\r\n        };\r\n    },\r\n});\r\nconst Form = FormImpl;\n\nfunction useFieldArray(arrayPath) {\r\n    const form = injectWithSelf(FormContextKey, undefined);\r\n    const fields = ref([]);\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    const noOp = () => { };\r\n    const noOpApi = {\r\n        fields,\r\n        remove: noOp,\r\n        push: noOp,\r\n        swap: noOp,\r\n        insert: noOp,\r\n        update: noOp,\r\n        replace: noOp,\r\n        prepend: noOp,\r\n        move: noOp,\r\n    };\r\n    if (!form) {\r\n        warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\r\n        return noOpApi;\r\n    }\r\n    if (!unref(arrayPath)) {\r\n        warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\r\n        return noOpApi;\r\n    }\r\n    const alreadyExists = form.fieldArrays.find(a => unref(a.path) === unref(arrayPath));\r\n    if (alreadyExists) {\r\n        return alreadyExists;\r\n    }\r\n    let entryCounter = 0;\r\n    function initFields() {\r\n        const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\r\n        fields.value = currentValues.map(createEntry);\r\n        updateEntryFlags();\r\n    }\r\n    initFields();\r\n    function updateEntryFlags() {\r\n        const fieldsLength = fields.value.length;\r\n        for (let i = 0; i < fieldsLength; i++) {\r\n            const entry = fields.value[i];\r\n            entry.isFirst = i === 0;\r\n            entry.isLast = i === fieldsLength - 1;\r\n        }\r\n    }\r\n    function createEntry(value) {\r\n        const key = entryCounter++;\r\n        const entry = {\r\n            key,\r\n            value: computed({\r\n                get() {\r\n                    const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\r\n                    const idx = fields.value.findIndex(e => e.key === key);\r\n                    return idx === -1 ? value : currentValues[idx];\r\n                },\r\n                set(value) {\r\n                    const idx = fields.value.findIndex(e => e.key === key);\r\n                    if (idx === -1) {\r\n                        warn(`Attempting to update a non-existent array item`);\r\n                        return;\r\n                    }\r\n                    update(idx, value);\r\n                },\r\n            }),\r\n            isFirst: false,\r\n            isLast: false,\r\n        };\r\n        return entry;\r\n    }\r\n    function remove(idx) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!pathValue || !Array.isArray(pathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        newValue.splice(idx, 1);\r\n        form === null || form === void 0 ? void 0 : form.unsetInitialValue(pathName + `[${idx}]`);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.splice(idx, 1);\r\n        updateEntryFlags();\r\n    }\r\n    function push(value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\r\n        if (!Array.isArray(normalizedPathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...normalizedPathValue];\r\n        newValue.push(value);\r\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.push(createEntry(value));\r\n        updateEntryFlags();\r\n    }\r\n    function swap(indexA, indexB) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        const newFields = [...fields.value];\r\n        // the old switcheroo\r\n        const temp = newValue[indexA];\r\n        newValue[indexA] = newValue[indexB];\r\n        newValue[indexB] = temp;\r\n        const tempEntry = newFields[indexA];\r\n        newFields[indexA] = newFields[indexB];\r\n        newFields[indexB] = tempEntry;\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    function insert(idx, value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || pathValue.length < idx) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        const newFields = [...fields.value];\r\n        newValue.splice(idx, 0, value);\r\n        newFields.splice(idx, 0, createEntry(value));\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    function replace(arr) {\r\n        const pathName = unref(arrayPath);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, arr);\r\n        initFields();\r\n    }\r\n    function update(idx, value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\r\n            return;\r\n        }\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(`${pathName}[${idx}]`, value);\r\n    }\r\n    function prepend(value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\r\n        if (!Array.isArray(normalizedPathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [value, ...normalizedPathValue];\r\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.unshift(createEntry(value));\r\n        updateEntryFlags();\r\n    }\r\n    function move(oldIdx, newIdx) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const newValue = isNullOrUndefined(pathValue) ? [] : [...pathValue];\r\n        if (!Array.isArray(pathValue) || !(oldIdx in pathValue) || !(newIdx in pathValue)) {\r\n            return;\r\n        }\r\n        const newFields = [...fields.value];\r\n        const movedItem = newFields[oldIdx];\r\n        newFields.splice(oldIdx, 1);\r\n        newFields.splice(newIdx, 0, movedItem);\r\n        const movedValue = newValue[oldIdx];\r\n        newValue.splice(oldIdx, 1);\r\n        newValue.splice(newIdx, 0, movedValue);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    const fieldArrayCtx = {\r\n        fields,\r\n        remove,\r\n        push,\r\n        swap,\r\n        insert,\r\n        update,\r\n        replace,\r\n        prepend,\r\n        move,\r\n    };\r\n    form.fieldArrays.push(Object.assign({ path: arrayPath, reset: initFields }, fieldArrayCtx));\r\n    onBeforeUnmount(() => {\r\n        const idx = form.fieldArrays.findIndex(i => unref(i.path) === unref(arrayPath));\r\n        if (idx >= 0) {\r\n            form.fieldArrays.splice(idx, 1);\r\n        }\r\n    });\r\n    return fieldArrayCtx;\r\n}\n\nconst FieldArrayImpl = defineComponent({\r\n    name: 'FieldArray',\r\n    inheritAttrs: false,\r\n    props: {\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const { push, remove, swap, insert, replace, update, prepend, move, fields } = useFieldArray(toRef(props, 'name'));\r\n        function slotProps() {\r\n            return {\r\n                fields: fields.value,\r\n                push,\r\n                remove,\r\n                swap,\r\n                insert,\r\n                update,\r\n                replace,\r\n                prepend,\r\n                move,\r\n            };\r\n        }\r\n        ctx.expose({\r\n            push,\r\n            remove,\r\n            swap,\r\n            insert,\r\n            update,\r\n            replace,\r\n            prepend,\r\n            move,\r\n        });\r\n        return () => {\r\n            const children = normalizeChildren(undefined, ctx, slotProps);\r\n            return children;\r\n        };\r\n    },\r\n});\r\nconst FieldArray = FieldArrayImpl;\n\nconst ErrorMessageImpl = defineComponent({\r\n    name: 'ErrorMessage',\r\n    props: {\r\n        as: {\r\n            type: String,\r\n            default: undefined,\r\n        },\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const form = inject(FormContextKey, undefined);\r\n        const message = computed(() => {\r\n            return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\r\n        });\r\n        function slotProps() {\r\n            return {\r\n                message: message.value,\r\n            };\r\n        }\r\n        return () => {\r\n            // Renders nothing if there are no messages\r\n            if (!message.value) {\r\n                return undefined;\r\n            }\r\n            const tag = (props.as ? resolveDynamicComponent(props.as) : props.as);\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            const attrs = Object.assign({ role: 'alert' }, ctx.attrs);\r\n            // If no tag was specified and there are children\r\n            // render the slot as is without wrapping it\r\n            if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\r\n                return children;\r\n            }\r\n            // If no children in slot\r\n            // render whatever specified and fallback to a <span> with the message in it's contents\r\n            if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\r\n                return h(tag || 'span', attrs, message.value);\r\n            }\r\n            return h(tag, attrs, children);\r\n        };\r\n    },\r\n});\r\nconst ErrorMessage = ErrorMessageImpl;\n\nfunction useResetForm() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return function resetForm(state) {\r\n        if (!form) {\r\n            return;\r\n        }\r\n        return form.resetForm(state);\r\n    };\r\n}\n\n/**\r\n * If a field is dirty or not\r\n */\r\nfunction useIsFieldDirty(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.dirty;\r\n    });\r\n}\n\n/**\r\n * If a field is touched or not\r\n */\r\nfunction useIsFieldTouched(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.touched;\r\n    });\r\n}\n\n/**\r\n * If a field is validated and is valid\r\n */\r\nfunction useIsFieldValid(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.valid;\r\n    });\r\n}\n\n/**\r\n * If the form is submitting or not\r\n */\r\nfunction useIsSubmitting() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * Validates a single field\r\n */\r\nfunction useValidateField(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return function validateField() {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return Promise.resolve({\r\n                errors: [],\r\n                valid: true,\r\n            });\r\n        }\r\n        return field.validate();\r\n    };\r\n}\n\n/**\r\n * If the form is dirty or not\r\n */\r\nfunction useIsFormDirty() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * If the form is touched or not\r\n */\r\nfunction useIsFormTouched() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * If the form has been validated and is valid\r\n */\r\nfunction useIsFormValid() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * Validate multiple fields\r\n */\r\nfunction useValidateForm() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return function validateField() {\r\n        if (!form) {\r\n            return Promise.resolve({ results: {}, errors: {}, valid: true });\r\n        }\r\n        return form.validate();\r\n    };\r\n}\n\n/**\r\n * The number of form's submission count\r\n */\r\nfunction useSubmitCount() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\r\n    });\r\n}\n\n/**\r\n * Gives access to a field's current value\r\n */\r\nfunction useFieldValue(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    // We don't want to use self injected context as it doesn't make sense\r\n    const field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\r\n        }\r\n        return unref(field === null || field === void 0 ? void 0 : field.value);\r\n    });\r\n}\n\n/**\r\n * Gives access to a form's values\r\n */\r\nfunction useFormValues() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        return (form === null || form === void 0 ? void 0 : form.values) || {};\r\n    });\r\n}\n\n/**\r\n * Gives access to all form errors\r\n */\r\nfunction useFormErrors() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        return ((form === null || form === void 0 ? void 0 : form.errors.value) || {});\r\n    });\r\n}\n\n/**\r\n * Gives access to a single field error\r\n */\r\nfunction useFieldError(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    // We don't want to use self injected context as it doesn't make sense\r\n    const field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\r\n        }\r\n        return field === null || field === void 0 ? void 0 : field.errorMessage.value;\r\n    });\r\n}\n\nfunction useSubmitForm(cb) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    const onSubmit = form ? form.handleSubmit(cb) : undefined;\r\n    return function submitForm(e) {\r\n        if (!onSubmit) {\r\n            return;\r\n        }\r\n        return onSubmit(e);\r\n    };\r\n}\n\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, IS_ABSENT, configure, defineRule, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useResetForm, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}