{"ast":null,"code":"import { mapState } from 'vuex';\nexport default {\n  name: 'ChoosePayment',\n  // data() {\n  // \treturn {\n  // \t}\n  // },\n  computed: { ...mapState({\n      plan_options: state => state.plan_options,\n      plan_selected: state => state.plan_selected\n    }),\n    plan_selected: {\n      get() {\n        return this.$store.state.plan_selected;\n      },\n\n      set(value) {\n        this.$store.commit('updatePlans', value);\n      }\n\n    }\n  },\n  methods: {\n    createOrder: async amount => {\n      // eslint-disable-line no-undef, no-unused-vars\n      // Fetching the data from  your server\n      const self = this;\n      const title = `Title-${new Date().toUTCString()}`;\n      await fetch(\"http://localhost:4200/create-payment-intent\", {\n        // await fetch(\"https://anddone.giganticdesign.com/create-payment-intent\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          amount: amount,\n          title: title,\n          shortDescription: \"shortDescription\",\n          paymentDescription: \"paymentDescription\",\n          invoiceNumber: \"invoiceNumber-005\",\n          expiresIn: \"3000\",\n          intent: {\n            paymentTypes: [\"DebitCard\", \"CreditCard\", \"ACH\"]\n          }\n        })\n      }).then(res => res.json()).then(res => {\n        const pluginOption = {\n          theme: \"classic\",\n          // classic, modern, minimal, vibrant\n          container: \"mywidget\" // id of the div to render the widget\n\n        }; //Assigning the payment token received from your server\n\n        const paymentIntentToken = res.paymentIntentToken;\n        console.log(`Payment Token: ${paymentIntentToken}`); // Initialize the plugin with token and options\n        // eslint-disable-next-line no-undef\n\n        const andDone = new AndDone(paymentIntentToken, pluginOption);\n        let checkPayment = setInterval(() => {\n          fetch(`https://flywheel.giganticdesign.com/ipfs/check-payment.php?token=${paymentIntentToken}`).then(response => response.text()).then(result => {\n            if (result == 'success') {\n              clearInterval(checkPayment);\n              self.$router.push({\n                name: 'accountBound'\n              });\n            }\n          }).catch(error => console.log('error', error));\n        }, 500); // Using onload function to perform some action after the widget is loaded  and ready\n        // eslint-disable-next-line no-unused-vars\n\n        andDone.onload = plugin => {};\n      });\n    }\n  },\n\n  mounted() {\n    const plan = this.plan_options.filter(function (opt) {\n      return opt.selected;\n    })[0];\n    this.createOrder(plan.premium.amount);\n  }\n\n};","map":{"version":3,"mappings":"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","names":["mapState","name","computed","plan_options","state","plan_selected","get","$store","set","value","commit","methods","createOrder","amount","self","title","Date","toUTCString","fetch","method","headers","body","JSON","stringify","shortDescription","paymentDescription","invoiceNumber","expiresIn","intent","paymentTypes","then","res","json","pluginOption","theme","container","paymentIntentToken","console","log","andDone","AndDone","checkPayment","setInterval","response","text","result","clearInterval","$router","push","catch","error","onload","plugin","mounted","plan","filter","opt","selected","premium"],"sourceRoot":"","sources":["/Users/lukedavid/Web/newco/src/views/ChoosePayment.vue"],"sourcesContent":["<template>\n\t<Transition appear>\n\t\t\n\t\t<div class=\"questionset card\">\n\t\t\t<h1 class=\"tw-heading text-center\">Payment</h1>\n\t\t\t<div class=\"content\">\n\t\t\t\t<div id=\"mywidget\"></div>\n\t\t\t</div>\n\t\t</div>\n\t</Transition>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\n\t\n\texport default {\n\t\tname: 'ChoosePayment',\n\t\t// data() {\n\t\t// \treturn {\n\t\t\t\t\t\t\t\n\t\t// \t}\n\t\t// },\n\t\tcomputed: {\n\t\t\t...mapState({\n\t\t\t\tplan_options: state => state.plan_options,\n\t\t\t\tplan_selected: state => state.plan_selected\n\t\t\t}),\n\t\t\tplan_selected: {\n\t\t\t\tget(){\n\t\t\t\t\treturn this.$store.state.plan_selected;\n\t\t\t\t},\n\t\t\t\tset(value){\n\t\t\t\t\tthis.$store.commit('updatePlans', value);\n\t\t\t\t}\n\t\t\t},\n\n\t\t},\n\t\tmethods: {\n\t\t\tcreateOrder: async (amount) => { // eslint-disable-line no-undef, no-unused-vars\n\t\t\t\t// Fetching the data from  your server\n\t\t\t\tconst self = this;\n\t\t\t\tconst title = `Title-${ new Date().toUTCString() }`;\n\t\t\t\tawait fetch(\"http://localhost:4200/create-payment-intent\", {\n\t\t\t\t// await fetch(\"https://anddone.giganticdesign.com/create-payment-intent\", {\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\"Content-Type\": \"application/json\"},\n\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\tamount: amount,\n\t\t\t\t\t\ttitle: title,\n\t\t\t\t\t\tshortDescription: \"shortDescription\",\n\t\t\t\t\t\tpaymentDescription: \"paymentDescription\",\n\t\t\t\t\t\tinvoiceNumber: \"invoiceNumber-005\",\n\t\t\t\t\t\texpiresIn: \"3000\",\n\t\t\t\t\t\tintent: { \n\t\t\t\t\t\t\tpaymentTypes: [\n\t\t\t\t\t\t\t\t\"DebitCard\",\n\t\t\t\t\t\t\t\t\"CreditCard\",\n\t\t\t\t\t\t\t\t\"ACH\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t}).then(res=> res.json()).then((res) => {\n\t\t\t\t\t\n\t\t\t\t\tconst pluginOption ={\n\t\t\t\t\t\ttheme : \"classic\",  // classic, modern, minimal, vibrant\n\t\t\t\t\t\tcontainer: \"mywidget\",  // id of the div to render the widget\n\t\t\t\t\t}\n\n\t\t\t\t\t//Assigning the payment token received from your server\n\t\t\t\t\tconst paymentIntentToken=res.paymentIntentToken;\n\t\t\t\t\tconsole.log(`Payment Token: ${paymentIntentToken}`);\n\n\t\t\t\t\t\n\t\t\t\t\t// Initialize the plugin with token and options\n\n\t\t\t\t\t// eslint-disable-next-line no-undef\n\t\t\t\t\tconst andDone = new AndDone(paymentIntentToken, pluginOption); \n\n\t\t\t\t\tlet checkPayment = setInterval(() => {\n\t\t\t\t\t\t\tfetch(`https://flywheel.giganticdesign.com/ipfs/check-payment.php?token=${paymentIntentToken}`)\n\t\t\t\t\t\t\t.then(response => response.text())\n\t\t\t\t\t\t\t.then(result => {\n\t\t\t\t\t\t\t\tif(result == 'success'){\n\t\t\t\t\t\t\t\t\tclearInterval(checkPayment);\n\t\t\t\t\t\t\t\t\tself.$router.push({name: 'accountBound'});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(error => console.log('error', error));\n\t\t\t\t\t\t}, 500);\n\n\t\t\t\t\t// Using onload function to perform some action after the widget is loaded  and ready\n\t\t\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t\t\t\tandDone.onload = (plugin) =>\n\t\t\t\t\t{\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\tmounted(){\n\t\t\tconst plan = this.plan_options.filter(function(opt){\n\t\t\t\treturn opt.selected;\n\t\t\t})[0]\n\t\t\tthis.createOrder(plan.premium.amount);\n\t\t}\n\t}\n</script>"]},"metadata":{},"sourceType":"module"}